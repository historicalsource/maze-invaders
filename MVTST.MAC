	.TITLE MVTST-MAZE INVADERS SELF TEST
	.NLIST
	.INCLUDE MVDEF
	.LIST
	.PAGE
	.PAGE
	.CSECT	MVTST


	.SBTTL	CKSUM-CHECKSUM EAROM
;
;EXIT	(EACKSM)=NEW CHECKSUM
;	(A)=DIFFERENCE BETWEEN OLD & NEW CHECKSUM
;	(Y)=OLD CHECKSUM
;USES	A,Y
CKSUM:	LDY I,EACKSM-EAROM-1
	LDA I,0FF		;STARTING PATTERN
	CLC
10$:	ADC Y,EAROM		;1'S COMPLEMENT CHECKUM
	DEY
	BPL 10$
	LDY EACKSM
	STA EACKSM		;SAVE NEW CHECKSUM
	TYA
	EOR EACKSM		;COMPARE WITH CURRENT CHECKSUM
	RTS


	.SBTTL	CHKEA-CHECK EAROM INTEGRITY
;
; THIS ROUTINE SHOULD BE GIVEN AT
; LEAST 100 MS AFTER POWER UP TO
; GIVE 30 V TO SETTLE FOR EAROM
;
CHKEA:	LDX I,6*NSCORE-1
20$:	LDA X,99$		;SEED HIGH SCORE TABLE
	STA X,HSCORE
	DEX
	BPL 20$
	JSR CKSUM		;CHECKSUM EAROM
	BNE 30$			;INVALID DATA IN EAROM
	LDA OPTNS		;GET BONUS LEVEL AND NUMBER OF LIVES AND DIFFICULTY
	CMP EAOPTS
	STA EAOPTS		;SAVE NEW SETTINGS
	BNE 28$			;DIFFERENT OPTION SETTINGS IGNORE HIGH SCORES
	LDA EAROM+2
	BEQ 30$			;IF HIGH SCORE IS BAD (IT MUST BE >16K)
	LDX I,08		;ASSUMING A GAME WILL NOT BE FINISHED AND
24$:	LDA X,EAROM		;BE ON THE HIGH SCORE TABLE WITHIN 8 SECONDS
	STA X,HSCORE
	CMP I,9A
	BCS 29$			;INVALID SCORE
	AND I,0F
	CMP I,0A
	BCS 29$			;INVALID SCORE
	LDA X,EAROM+9
	STA X,INITL		;UPDATE SCORES AND INITIALS
	DEX
	BPL 24$
28$:	RTS

29$:	INC EACKSM		;CLOBBER CHECKSUM
	JMP CHKEA		;TRY AGAIN ("HSCORE" HAS BEEN CLOBBERED)

30$:	LDA I,0
	LDX I,EACKSM-EAROM
35$:	STA X,EAROM		;CLEAR EAROM BUFFER
	DEX
	BPL 35$
	LDA OPTNS		;BONUS LEVEL AND NUMBER OF LIVES ONLY
	STA EAOPTS		;SET OPTION SETTINGS
	RTS

99$:	.BYTE 75,91,3		;INITIAL SCORES
	.BYTE 54,82,3
	.BYTE 30,78,3
	.BYTE 20,65,3
	.BYTE 78,54,3
	.BYTE 84,30,2
	.BYTE 27,22,2
	.BYTE 16,19,2
	.BYTE 2,2,0D		;BBM - INITIAL SET OF INITIALS
	.BYTE 5,4,0		;ED
	.BYTE 4,15,7		;DUG
	.BYTE 5,4,0		;ED
	.BYTE 0C,0F,7		;LOG
	.BYTE 4,15,7		;DUG
	.BYTE 13,0E,19		;SNY
	.BYTE 4,5,12		;DER

	.SBTTL	INITEA-INITIALIZE FROM EAROM
;
;	THIS ROUTINE MUST NOT BE INTERRUPTED OTHERWISE
;	THE TIMING PULSES MAY CAUSE THE EA ROM TO BE MISREAD.
;
INITEA:	LDX I,EACKSM-EAROM		;READ ALL OF THE EAROM
10$:	JSR READEA		;READ EA ROM LOCATION
	STA X,EAROM
	DEX
	BPL 10$			;READ IT ALL NOW
	STX ROMA		;STOP ANY EAROM REQUESTS
	RTS


	.SBTTL	READEA-READ EA ROM
;
;THIS ROUTINE ASSUMES THAT NO IRQ/NMI
;INTERRUPTS WILL OCCUR OTHERWISE THE RESULTS
;ARE INDETERMINATE.
;
;ENTRY	(X)=ADDRESS TO READ (0 TO 63.)
;EXIT	(A)=VALUE READ FROM EA ROM
;USES	A,Y
READEA:	STA X,EAADDR		;SET ADDRESS LATCH (WRITE DECODED)
	LDY I,8
	STY EACTRL		;SET READ MODE AND ENABLE CHIP
	INY			;Y=9
	STY EACTRL		;ENABLE CLOCK
	DEY			;Y=8
	STY EACTRL		;DISABLE CLOCK-DATA IN 2 US
	LDY I,0
	LDA EAREAD		;READ DATA-4 CYCLES AT 1.5MHZ >2 US
	STY EACTRL		;DESELECT CHIP WITHIN 24 US
	RTS


	.SBTTL	WRITEA-WRITE DATA TO EAROM
;
;ENTRY	(ROMA)=CURRENT EAROM ADDRESS (0-63.)
;	(ROMC)=CURRENT OPERATION (0=COMPARE, 1=WRITE DATA)
;	(FRAME)=FRAME COUNT INCREMENTED EVERY 16 MS
;EXIT	(ROMA)=UPDATED TO NEXT LOCATION TO WRITE
;	(ROMC)=1=TO WRITE DATA, 0=CONTINUE COMPARE
WRITEA:	LDA FRAME
	AND I,3
	BNE 10$			;EVERY 64 MS CHECK EAROM
	STA EACTRL		;DISABLE EAROM
	LDX ROMA
	BMI 10$			;ALL DONE
	LSR ROMC
	BCC 20$			;COMPARE NEXT LOCATION-JUST FINISHED A WRITE
	LDA I,2			;WRITE DATA CURRENTLY LATCHED
	STA EACTRL
	LDA I,0A
	STA EACTRL		;ENABLE CHIP AND START
	DEC ROMA		;MOVE TO NEXT ADDRESS FOR COMPARE
10$:	RTS

20$:	SEI			;DISABLE IRQ
25$:	JSR READEA		;READ EA ROM
	CMP X,EAROM
	BNE 30$			;DATA IS NOT THE SAME
	DEX
	BPL 25$			;READ NEXT LOCATION
	CLI
	STX ROMA		;NO FURTHER COMPARES.
	RTS			;CLEAR CHIP ENABLE IN 64 MS

30$:	CLI			;ENABLE IRQ'S AGAIN
	STX ROMA		;RESET WHERE WE LEFT OFF
	LDA I,6
	STA EACTRL		;DESELECT CHIP AND SET ERASE MODE
	LDA X,EAROM
	STA X,EAADDR		;SET DATA AND ADDRESS LATCH
	LDA I,0E
	STA EACTRL		;ENABLE CHIP AND START ERASE
	INC ROMC		;SET TO WRITE NEXT TIME THRU
	RTS


	.SBTTL RESET-POWER-ON RESET
RESET:	SEI			;DISABLE IRQ FOR EASE OF USE ON DEVELOPMENT SYSTEM
	CLD
	LDX I,0FF
	TXS			;SET STACK POINTER
	INX
	TXA
10$:	STA ZX,0		;CLEAR ZERO PAGE
	STA X,100		;CLEAR PAGE ONE
	STA X,200
	STA X,300
	STA X,PLYFLD
	STA X,PLYFLD+100
	STA X,PLYFLD+200
	STA X,PLYFLD+300
	DEX
	BNE 10$			;LEAVE WITH X=0
	STA SKCTL0		;INITIALIZE POKEY
	STA SKCTL1
	STA ACTL0
	STA ACTL1
	STA VIDROT		;CLEAR VIDEO FLIP
	STA CCNTR+1		;TURN OFF COIN COUNTERS
	STA CCNTR+2
	LDX I,07
20$:	STA X,AUDC0		;TURN OFF SOUNDS
	STA X,AUDC1
	DEX
	BPL 20$

	.SBTTL	MEMORY TEST
MEMTST:	LDX I,7		;SET UP COLORS
10$:	TXA
	STA X,ANCOL		;FOR ALPHANUMERICS AND MOTION OBJECTS
	STA X,MOCOL
	ORA I,08
	STA X,ANCOL+8
	STA X,MOCOL+8
	LDA I,0
	STA X,AUDC0		;STOP ALL SOUNDS
	STA X,AUDC1
	DEX
	BPL 10$
	LDX I,0
20$:	LDA X,0
	BNE 70$			;NON ZERO=ERROR
	LDA I,11
30$:	STA X,0			;WRITE OUT TEST PATTERN
	TAY
	EOR X,0
	BNE 70$			;NOT THE SAME-ERROR
	TYA
	EOR I,0FF		;WRITE MORE THAN 1 BIT
	STA X,0			;THIS CAUSES SOME RAM'S TO FAIL
	EOR X,0
	BNE 70$			;IF AN ERROR OCCURED
	TYA
	ASL
	BCC 30$			;SHIFT PATTERN
	INX
	BNE 20$			;NEXT LOCATION
	STA WTCHDG		;NOT NOW
	TXA
	STA TEMP1
	ROL			;START AT ADDRESS 100
35$:	STA TEMP1+1		;USE ZERO PAGE FOR REST OF MEM TEST
	LDY I,0
40$:	LDX I,11		;CURRENT PATTERN
	LDA NY,TEMP1
	BNE 80$			;AN ERROR-MUST START ZERO
45$:	TXA
	STA NY,TEMP1		;WRITE TO LOCATION
	EOR NY,TEMP1		;COMPARE IT
	BNE 80$			;OR ERROR
	TXA			;AS ABOVE WRITE MORE THAN 1 BIT
	EOR I,0FF
	STA NY,TEMP1
	EOR NY,TEMP1
	BNE 80$			;IF AN ERROR OCCURED
	TXA
	ASL
	TAX
	BCC 45$			;NEXT PATTERN
	INY
	BNE 40$			;NEXT LOCATION TO TEST
	STA WTCHDG		;NOT NOW
	INC TEMP1+1
	LDA TEMP1+1
	CMP I,4			;TEST 4 PAGES STARTING WITH ZERO PAGE
	BNE 50$			;TRY PLAYFIELD RAM
	LDA I,PLYFLD/100
50$:	CMP I,PLYFLD+400/100
	BCC 35$			;NEXT PAGE TO TEST
	JMP STEST1

70$:	CMP I,10		;CARRY CLEAR=D0-D3 IN ERROR ELSE D4-D7 IN ERROR
	LDA I,0
	BPL 85$			;ALWAYS

80$:	LDX TEMP1+1
	CPX I,PLYFLD/100
	BCC 70$			;MUST BE WITHIN ONE OF TWO 2114'S
	TAX
	TYA			;THE 2101'S ARE ORGANIZED BY BLOCKS OF
	AND I,30		;16 BYTES EACH ALTERNATING EVERY
	LSR			;4*16 BYTES
	LSR
	LSR
	LSR			;CLEARS CARRY
	ADC I,1			;1=FIRST PAIR, 2=SECOND PAIR, ETC
	CPX I,10		;DETERMINE LSB OR MSB
85$:	ROL			;NUMBER OF GOOD CHIPS BEFORE ERROR
	TAY
	LDA I,40		;SAME FREQUENCY
	STA AUDF0
	LDX I,07
	STX SKCTL0		;TURN ON POKEY
RAMBAD:	LDX I,10
	LDA I,0AF
	STA AUDC0		;PURE TONE VOLUME ON
5$:	BIT VBLANK
	BPL 5$			;WAIT UNTIL VBLANK STARTS
10$:	BIT VBLANK
	BMI 10$			;WAIT UNTIL VBLANK ENDS
	STA WTCHDG
	DEX
	BNE 5$			;COUNT DOWN VBLANK'S
	STX AUDC0		;TURN OFF SOUNDS
	LDX I,10
15$:	BIT VBLANK
	BPL 15$			;WAIT UNTIL VBLANK STARTS
20$:	BIT VBLANK
	BMI 20$			;WAIT UNTIL VBLANK ENDS
	STA WTCHDG
	DEX
	BNE 15$			;COUNT DOWN VBLANK'S
	DEY
	BPL RAMBAD		;LOOP DESIRED NUMBER OF TIMES
30$:	BMI 30$			;WAIT FOR WATCHDOG TO TRY AGAIN


	.SBTTL	INITIALIZE FOR START OF ATTRACT
STEST1:	LDA I,0
	TAX
60$:	STA X,0			;CLEAR MEMORY AGAIN
	STA X,100
	STA X,200
	STA X,300
	DEX
	BNE 60$
	DEX			;X=-1
	STX MODE
	STX UPDFLG
	STX UPDFLG+1
	STX HLEVEL		;NO CONTINUATION BECAUSE THERE IS NO PREVIOUS GAME
	LDA SLFTST
	BPL TVTEST		;SELF-TEST
	STA LLEVEL		;START PLAYER IN THE MIDDLE
	STA FRUIT		;INITIALIZE FRUIT FIRST TIME THRU
	LDA I,1
	STA ONE			;FIRST TIME THRU
	LDA I,7
	STA SKCTL0		;TURN ON POKEY
	STA SKCTL1
	STA POTGO0
	LDA OPTSW0		;READ OPTION SWITCHS
	STA OPTNS
	STA POTGO1
	LDA OPTSW1
	STA $CMODE
	LDA OPTSW2
	AND I,7F
	STA OPTNS2
	JSR INITEA		;READ EAROM
	LDA I,12.
	STA LEVEL		;START PLAYER IN ONE OF THE CORNER MAZES
	JSR CHKEA		;CHECK EAROM CONTENTS
	JMP MAIN		;ELSE GO TO GAME MODE

	.SBTTL	TV MONITOR ADJUSTMENT TEST
TVTEST:	LDA $COINA
	AND I,20
	BEQ 3$
	JMP PATSCN		;IF LEFT COIN IS NOT ON CONTINUE SELF TEST

3$:	TAX			;X=0
4$:	STA X,0			;PREVENT SOFTWARE WATCHDOG,
	INX			;SLAM ABUSE ALARM AND
	BNE 4$			;COIN COUNTERS
	LDX I,15.
5$:	STA X,MOBJV		;REMOVE MOTION OBJECTS
	DEX
	BPL 5$
	LDA I,PLYFLD+300/100
	STA TEMP1+1
	LDY I,0FF
10$:	LDA I,NDOOR		;BLOCK OF COLOR 2
12$:	LDX I,08
14$:	STA NY,TEMP1
	DEY
	DEX
	BNE 14$			;1/4 OF SCREEN HEIGHT
	EOR I,NDOOR&7F		;THIS RUNS THRU FOUR STATES ENDING WITH 0
	BPL 15$
	CMP I,NDOOR		;SHOULD BE USED
	BNE 12$			;IF WE JUST USED 80
	LDA I,NDOOR&7F
	BNE 12$			;ALWAYS

15$:	CMP I,NDOOR&7F
	BNE 12$			;IF WE DID NOT JUST USE 0
	CPY I,0FF
	BNE 10$			;NOT CROSSING PAGE BOUNDARY
	DEC TEMP1+1
	LDA TEMP1+1
	CMP I,PLYFLD/100
	BCS 10$			;CONTINUE UNTIL END OF PLAYFIELD
	CLI			;START INTERRUPTS
20$:	LDA SLFTST		;TEMP1=0 ON ENTRY
	BMI 20$			;IF NOT IN SELF TEST LET WATCHDOG RESET US
	LSR SYNC		;DO NOT LET IRQ HANG US WITH SOFTWARE WATCHDOG
	STA WTCHDG
	LDA $COINA
	CMP I,0E0		;D5-D7=COIN SWITCHES
	ROL TEMP1
	LDA TEMP1
	AND I,03
	EOR I,02		;LOOK FOR OFF TO ON TRANSITION
	BNE 20$			;WAIT FOR NEXT TEST
	LDA I,DOT
	SEI			;NO MORE COLOR BARS
30$:	STA X,PLYFLD		;SET UP DOT PATTERN THRU PLAYFIELD
	STA X,PLYFLD+100
	STA X,PLYFLD+200
	CPX I,0C0
	BCS 35$			;KEEP MOTION OBJECTS OFF THE SCREEN
	STA X,PLYFLD+300
35$:	INX
	BNE 30$
	LDX I,0E
	STX ANCOL+1		;WHITE DOTS
	LDX I,0F
	STX ANCOL		;4 LSB'S=F=BLACK BACKGROUND
40$:	LDA SLFTST
	BMI 40$			;IF NOT IN SELF TEST WAIT FOR WATCHDOG
	STA WTCHDG
	BPL 40$			;ALWAYS


	.SBTTL	PATTERN SCREEN
PATSCN:	LDX I,0
1$:	DEX
	LDA I,0
	STA AX,PLYFLD		;CLEAR REST OF PLAYFIELD
	STA AX,PLYFLD+100
	STA AX,PLYFLD+200
	TXA
	STA AX,PLYFLD+2C0
	BNE 1$
	DEX			;X=-1
	STX COLCNT		;NO COLOR BARS
	STX INPUT+6		;TO TEST POLYCOUNTER
	STX INPUT+9		;TEST SECOND POKEY
	STA STRTL1
	STA STRTL2		;TURN ON LED'S
	LDX I,0E
10$:	TXA
	ORA I,80
	STA X,MOBJH		;PUT MOTION OBJECTS IN MIDDLE
	STA X,MOBJV		;MOTION OBJECT PICTURES SET TO 0 BY CLEARING ZERO PAGE
	TXA
	AND I,0C		;SET COLORS TO USE ALL 4 BANKS
	ASL
	ASL
	ASL
	ASL
	ORA I,39
	STA X,MOBJC
	DEX
	DEX
	BPL 10$
	LDX I,0F
20$:	TXA
	CPX I,04
	BCS 24$			;SET COLORS FOR DEFAULTS
	STA X,STCOL		;INITIALIZE COLORS FOR EVERYTHING
24$:	STA X,ANCOL
	STA X,MOCOL
	DEX
	BPL 20$


	.SBTTL	ROM TEST
ROMTST:	LDX I,0			;PROG STARTS ON EVEN PAGE BOUNDARY
	STX TEMP1		;LOW ADDRESS PTR
	LDA I,PROG&0FF00/100	;HIGH BYTE OF PROG ADDR
	STA TEMP1+1		;HIGH ADDRESS PTR
	LDX I,79.		;80 PAGES = 20K
	LDA I,0FF		;STARTING TEST PATTERN
10$:	LDY I,0
	STX A,WTCHDG		;MUZZLE DOG
1$:	EOR NY,TEMP1		;LONGITUDINAL PARITY
	INY
	BNE 1$			;LOOP FOR 1 PAGE
	TAY			;SAVE LRC
	TXA
	AND I,0F		;15 PAGES = 4K
	CMP I,1			;CLEAR CARRY IF END OF ROM
	TYA			;PUT LRC BACK
	BCS 3$			;SKIP IF IN ROM
	PHA			;ELSE SNAP FOR ANALYZER
	LDA I,0FF		;NEW STARTING PATTERN
3$:	INC TEMP1+1		;BUMP PTR
	DEX			;COUNT PAGES
	BPL 10$
	LDA I,PLYFLD/100	;DISPLAY CHECKSUMS
	STA TEMP4+1
	LDX I,4
15$:	TXA
	EOR I,1F
	STA TEMP4		;STARTING ADDRESS FOR MESSAGE
	PLA
	BEQ 20$
	PHA
	LDA I,12
	JSR CHAR		;DISPLAY R
	TXA
	ORA I,20		;NUMBERS START AT 20
	JSR CHAR		;DISPLAY NUMBERS
	LDA I,0
	JSR CHAR		;BLANK
	PLA
	CLC
	JSR DIGIT2		;CHECKSUM IN ERROR
20$:	DEX
	BPL 15$			;DO ALL CHECKSUMS


	.SBTTL	EAROM ACCOUNTING COMPUTATIONS
EAROMC:	JSR INITEA		;READ IN EAROM CONTENTS
	LDY I,6
25$:	LDA Y,EAGAMS		;COPY EA ROM ACCOUNTING TO SCRATCH RAM
	STA Y,TEMP2+1		;SAVE IN TEMP2+1 THRU TEMP5
	DEY
	BPL 25$
	INY
	SED
30$:	INY
	CPY I,0EF
	BEQ 40$			;OVERFLOW-LEAVE AT MAX
	LDA TEMP4		;SUBTRACT NUMBER OF GAMES
	SEC			;UNTIL TOTAL GAME TIME IS NEGATIVE
	SBC TEMP2+1		;NOTE THAT THE RESULT IS MODUL0 16 MINUTES
	STA TEMP4		;64 SECONDS = 1 MINUTE
	LDA TEMP4+1
	SBC TEMP3
	STA TEMP4+1
	LDA TEMP5
	SBC TEMP3+1
	STA TEMP5
	LDA TEMP5+1
	SBC I,0
	STA TEMP5+1
	BPL 30$			;IF NOT DONE
40$:	CLD
	TYA
	AND I,0F
	CMP I,0F
	TYA
	BCC 42$			;IF 60 SECONDS THEN ADD 1 TO MINUTES
	INY
42$:	LSR			;ADD 64 SECOND NIBBLE TO 4 SECOND NIBBLE BECAUSE
	LSR			;64 SECONDS=1 MINUTES + 4 SECONDS
	LSR
	LSR
	STY TEMP2
	CLC
	ADC TEMP2		;ADJUSTED MINUTES + SECONDS/4
	STA TEMP2
	AND I,0F
	CMP I,0F
	BCC 45$			;IF 60 SECONDS THEN ADD 1 TO MINUTES
	INC TEMP2
45$:	LDA RND0		;TEST POKEY FOR SELF TEST
	EOR RND0
	STA INPUT+8		;MUST BE ZERO ELSE POKEY IS BAD
	LDA RND1
	EOR RND1
	STA INPUT+11.		;MUST BE ZERO
	LDA I,7
	STA SKCTL0		;TURN ON POKEY
	STA SKCTL1
	CLI			;ENABLE IRQ FOR MOTION OBJECTS

	.SBTTL	MAIN LOOP OF SELF TEST
;
;	STTMP2=WHICH AUDIO CHANNEL IS USED (0,2,4,6,8,A,C, OR E)
;	STTMP3=CURRENT MOTION OBJECT (0,2,4...,E)
;	(TEMP2)=AVERAGE GAME TIME
;	STCOL=BACKGROUND COLOR (CONTROLLED BY 1 PLAYER START)
;	STCOL+1=COLOR CONTROLLED BY 2 PLAYER START
;	STCOL+2=COLOR CONTROLLED BY REVERSE
;	STCOL+3=COLOR CONTROLLED BY FIRE
;	STCOL+4=CURRENT MOTION OBJECT PICTURE CODE
;
SFTEST:	LSR SYNC		;---
	BCC SFTEST		;WAIT FOR VBLANK
	LDA SLFTST
5$:	BMI 5$			;LET WATCHDOG RESET SELF TEST
	STA WTCHDG


	.SBTTL	PROCESS SWITCHES
	LDA START1
	AND I,0FD		;CLEAR UNUSED BIT
	TAX
	EOR I,0FF		;CHANGE 0=ON TO 1=ON
	AND INPUT+3		;1 FOR ALL SWITCHES GOING FROM OFF TO ON
	STX INPUT+3		;NEW SWITCH READINGS
	STA STTMP0		;SAVE STATE OF BUTTONS JUST PRESSED
	LDA START2
	AND I,0AD		;CLEAR UNUSED BITS
	TAX
	EOR I,0FF
	AND INPUT+4
	STX INPUT+4		;NEW SWITCH READINGS
	STA STTMP1		;SAVE STATE OF BUTTONS JUST PRESSED
	ORA STTMP0
	LSR
	BCC 8$			;NO CHANGE IN REVERSE
	INC STCOL+2		;NEW COLOR
	LDX STCOL+2
	LDY I,2
	JSR STCOLR		;SET COLORS
8$:	LSR
	LSR
	BCC 14$			;NO CHANGE IN EITHER FIRE
	INC STCOL+3
	LDX STCOL+3
	LDY I,03
	JSR STCOLR		;SET COLORS
14$:	LDA STTMP0		;D4=0=1 PLAYER START
	AND I,08
	BEQ 17$			;NO RELEASE OF SWITCH
	LDA STTMP2
	TAX
	CLC
	ADC I,02		;USE NEXT CHANNEL
	AND I,0E		;ONLY 8 CHANNELS
	STA STTMP2
	LDA I,0
	CPX I,08
	BCC 15$			;LOWER POKEY
	STA X,AUDC1-8
	BCS 16$			;ALWAYS

15$:	STA X,AUDC0		;TURN OFF OLD CHANNEL
16$:	INC STCOL+4
	LDA STCOL+4
	AND I,3F		;NO OVERFLOW
	CMP I,20
	BCS 50$			;IF ABOVE SPECIAL STAMPS
	CMP I,10
	BCC 40$			;JUST USE BLANKS HERE
38$:	LDA I,0E		;A BLANK STAMP
40$:	CMP I,9
	BCC 50$			;NO CHANGE NEEDED USE THIS PICTURE CODE
	CMP I,0C
	BCS 50$			;ABOVE SPECIAL AREA
	LDA INPUT+2
	AND I,7F
	EOR I,0FF		;REMEMBER 0=ON
	AND INPUT
	AND INPUT+1
	EOR I,0FF
	BNE 38$			;NOT ALL OPTION SWITCHES ON
	LDA STCOL+1
	AND I,0F		;IGNORE UPPER BITS
	CMP I,9
	BNE 38$			;IF FIRST COLOR IS NOT GREY
	LDA STCOL+4
	AND I,3F		;USE SECRET STAMPS
50$:	LDX I,0E
18$:	STA X,MOBJP		;SET NEW MOTION OBJECT PICTURE
	DEX
	DEX
	BPL 18$
	INC STCOL		;NEW BACKGROUND COLORS
	LDX STCOL
	LDY I,0
	JSR STCOLR		;SET COLORS.
17$:	LDA STTMP1
	AND I,08		;D4=0=2 PLAYER START
	BEQ 20$			;SWITCH WAS NOT JUST DEPRESSED
	INC STCOL+1
	LDX STCOL+1
	LDY I,1
	JSR STCOLR		;SET COLORS
	LDA STTMP3
	CLC
	ADC I,2
	AND I,0E		;THIS IS MOTION OBJECT INDEX
	STA STTMP3
20$:	LDA STTMP0
	AND I,04		;D2=0=PLAYER 1 FIRE
	BEQ 25$			;SWITCH WAS NOT JUST DEPRESSED
	LDA I,0
	STA PLAYR
25$:	LDA STTMP1
	AND I,04		;D2=0=PLAYER 2 FIRE
	BEQ OPTION		;IF SWITCH NOT JUST DEPRESSED
	LDA I,01
	STA PLAYR 		;USE PLAYER 2 JOYSTICK


	.SBTTL	DISPLAY OPTION SWITCH SETTINGS
OPTION:	LDA I,PLYFLD+138/100	;DISPLAY NUMBER OF LIVES
	STA TEMP4+1
	LDA I,PLYFLD+138&0FF
	STA TEMP4
	LDA OPTSW2		;SWITCHES 1 THRU 7
	AND I,7F
	STA INPUT+2
	SEI
	STA POTGO0
	LDA OPTSW0
	STA INPUT
	CLI
	AND I,0C
	LSR
	LSR
	ADC I,01		;2 THRU 5 LIVES
	STA TEMP1
	LDX I,5			;LOOP COUNTER
30$:	LDA I,1F		;PICTURE CODE FOR PLAYERS PIECE
	BIT TEMP1
	BPL 35$			;IF MORE SHIPS
	LDA I,0			;CLEAR OLD SHIP IF SWITCH CHANGED
35$:	JSR CHAR		;DISPLAY A PICTURE OF PLAYERS PIECE
	DEC TEMP1
	DEX
	BNE 30$
	LDA I,PLYFLD+137&0FF	;DISPLAY MUCH MULTIPLIERS
	STA TEMP4
	SEI
	STA POTGO1
	LDA OPTSW1
	STA INPUT+1
	CLI
	AND I,10
	LSR
	LSR
	LSR			;CLEARS CARRY
	LSR
	ADC I,01		;1 OR 2
	ORA I,20
	JSR CHAR		;CENTER MECH MULTIPLIER (1 OR 2)
	LDA INPUT+1
	AND I,0C
	LSR
	LSR			;CLEARS CARRY
	BNE 40$			;IF NOT SET FOR UNIT COIN
	LDA I,-2
40$:	ADC I,3			;1,4,5, OR 6
	ORA I,20
	JSR CHAR		;DISPLAY MECH MULTIPLIER
	LDA I,PLYFLD+136&0FF
	STA TEMP4
	LDA I,0
	TAY
	STA NY,TEMP4		;CLEAR LAST BONUS ADER
	LDY I,40
	STA NY,TEMP4
	LDA INPUT+1
	LSR
	LSR
	LSR
	LSR
	LSR
	BEQ 50$			;NO BONUS COINS
	TAX
	CMP I,06
	BCS 50$
	LDA X,BONUSC-1		;GET BONUS COIN VALUE
	JSR CHAR		;DISPLAY THE NUMBER
	LDA I,0
	JSR CHAR		;SKIP A SPACE
	LDA I,21
	CPX I,3
	BNE 48$			;IF ONLY GIVING 1 BONUS UNIT COIN
	LDA I,22
48$:	JSR CHAR		;DISLAY BONUS COINS GIVEN
50$:	LDA INPUT
	AND I,0C0
	ASL
	ROL
	ROL
	ROL
	TAX
	LDA X,DIFF		;GET ADDRESS FOR GAME DIFFICULTY
	STA TEMP5
	LDA X,DIFF+1
	STA TEMP5+1
	LDA I,PLYFLD+135&0FF
	STA TEMP4		;DESTINATION ADDRESS
	JSR MESSAG		;DISPLAY "EASY" OR "HARD"
	LAH NODEMO		;*** DEMO AND NODEMO MUST BE ON SAME PAGE***
	STA TEMP5+1
	LDA INPUT+1
	AND I,0C3
	EOR I,0C0
	CMP I,01
	LAL NODEMO
	BCS 60$			;NOT IN DEMO MODE
	LAL DEMO
60$:	STA TEMP5
	LDA I,PLYFLD+134&0FF
	STA TEMP4
	JSR MESSAG		;DISPLAY "DEMO" IF NECESSARY


	.SBTTL	DISPLAY ALL INPUTS
INPUTS:	LDA RND0
	PHA
	AND INPUT+6		;CHECK SORTED BITS IN POKEY
	STA INPUT+6		;DISPLAY RANDOM NUMBERS
	PLA
	ORA INPUT+7		;CHECK FOR SHORTED BITS IN POKEY
	STA INPUT+7
	LDA RND1		;TEST OTHER POKEY TOO
	PHA
	AND INPUT+9
	STA INPUT+9
	PLA
	ORA INPUT+10.
	STA INPUT+10.
	LDX I,0			;CLR X
	LDA INPUT+3
	ORA I,02		;DO NOT COUNT UNUSED BIT
	SEC			;8 SWITCHES
	ROL
1$:	BCS 2$
	INX			;COUNT 0'S
2$:	ASL			;SHIFT TO NEXT SW
	BNE 1$			;IF THERE IS ONE
	LDA INPUT+4
	AND I,0F		;LOWER 4 BITS ONLY
	ORA I,12		;DO NOT COUNT UNUSED BIT
	LSR
3$:	BCS 4$			;NOT SET
	INX
4$:	LSR
	BNE 3$			;IF NOT DONE
	TXA			;X=NUMBER OF SWITCHES CLOSED (0 TO 12)
	LDY STTMP2
	ASL
	ASL
	ASL
	CPY I,08
	BCC 7$			;USE LOWER POKEY
	STA Y,AUDF1-8		;USE OTHER POKEY
	TXA
	ORA I,0A0
	STA Y,AUDC1-8
	BMI 8$			;ALWAYS

7$:	STA Y,AUDF0		;SET FREQUENCY BY NUMBER OF SWITCHES
	TXA
	ORA I,0A0		;SET VOLUME BY NUMBER OF SWITCHES
	STA Y,AUDC0
8$:	LDX PLAYR
	JSR JOYST1		;CONVERT HORIZONTAL JOYSTICK VALUES
	LDX PLAYR
	LDY X,JOYS
	LDA Y,SPEED		;GET HORIZONTAL CHANGE IN DIRECTION
	LDX STTMP3		;RESTORE MOTION OBJECT INDEX
	CLC
	ADC X,MOBJH
	STA X,MOBJH		;MOVE CURRENT MOTION OBJECT
	LDX PLAYR
	INX
	INX
	JSR JOYST1		;CONVERT VERTICAL JOYSTICK VALUES
	LDX PLAYR
	LDY X,JOYS+2
	LDA Y,SPEED		;GET VERTICAL CHANGE IN DIRECTION
	LDX STTMP3		;RESTORE MOTION OBJECT INDEX
	JSR COMP		;VERTICAL RUNS OPPOSITE FROM WHAT WE WANT
	CLC
	ADC X,MOBJV
	STA X,MOBJV		;MOVE VERTICAL TOO
	LDY I,4*32.+12.		;POSITION FOR 5 COLUMNS, UP 12 ROWS FROM THE BOTTOM
	LDX I,4			;DISPLAY 5 COLUMNS OF INPUTS
9$:	TXS
	LDX I,7
10$:	TXA
	TSX
	ROL X,INPUT
	TAX
	LDA I,21		;(='0')ASSUME OFF (HI)
	BCS 12$			;IF SWITCH OFF (1)
	LDA I,20		;THEN WRITE '1'
12$:	INY			;ASSUME STRAIGHT FORWARD
	STA Y,PLYFLD		;ONE COLUMN AWAY FROM EDGE
	DEX
	BPL 10$
	TSX
	ROL X,INPUT		;RESTORE "INPUT"
	TYA
	SEC
	SBC I,32.+8.
	TAY
	DEX
	BPL 9$
	TXS			;RESET STACK
	LDA I,PLYFLD/100
	STA TEMP4+1
	LDA I,PLYFLD+19&0FF
	STA TEMP4		;SET SCREEN ADDRESS FOR POKEY ERRORS
	LDA INPUT+7
	EOR I,0FF		;IT SHOULD NOW BE ZERO FOR NO SHORTED LOW BITS
	ORA INPUT+6
	ORA INPUT+8
	BEQ 15$			;EVERY THING IS FINE
	LDA I,10		;POKEY IS NOT GOOD
15$:	PHA
	JSR CHAR		;DISPLAY A "P0" IF POKEY0 IS BAD ELSE BLANK
	PLA
	BEQ 16$			;IF A BLANK
	LDA I,20
16$:	JSR CHAR		;SECOND CHARACTER
	LDA I,PLYFLD+18&0FF
	STA TEMP4		;SET PLAYFIELD ADDRESS
	LDA INPUT+10.
	EOR I,0FF		;IT SHOULD BE ALL ONES
	ORA INPUT+9.
	ORA INPUT+11.
	BEQ 18$			;POKEY IS GOOD
	LDA I,10
18$:	PHA
	JSR CHAR		;DISPLAY BLANK OR "P1" FOR SECOND POKEY
	PLA
	BEQ 19$			;IF A BLANK
	LDA I,21
19$:	JSR CHAR		;SECOND CHARACTER


	.SBTTL	DISPLAY JOYSTICK VALUES
JOYVAL:	LDX I,3
10$:	TXA
	LSR
	BCC 15$			;IF NOT SECOND JOYSTICK
	LDA COCKSW
	AND I,20
	BNE 20$			;IF WE ARE NPOT IN A COCKTAIL CABINET
15$:	STX TEMP1
	LDA I,PLYFLD+104/100
	STA TEMP4+1
	LDA I,PLYFLD+104&0FF
	SEC
	SBC TEMP1
	STA TEMP4		;SET PLAYFIELD ADDRESS
	LDA X,LOW
	CLC
	JSR DIGIT2		;DISPLAY TWO DIGITS OF LOW POT VALUE
	JSR SKIP		;SKIP A SPACE
	LDX TEMP1
	LDA X,LAST
	CLC
	JSR DIGIT2		;DISPLAST LAST READING
	JSR SKIP		;SKIP A SPACE
	LDX TEMP1
	LDA X,HIGH
	CLC
	JSR DIGIT2		;DISPLAY HIGH POT VALUE
	LDX TEMP1
20$:	DEX
	BPL 10$			;DO ALL POTS


	.SBTTL	process EAROM data
EAROMD:	JSR WRITEA		;READ EAROM
	JSR CKSUM
	STY EACKSM		;RESTORE OLD CHECKSUM
	BEQ 20$			;EAROM IS VALID
	PHA			;SAVE OLD DIFFERENCE
	LDA I,PLYFLD+1A&0FF
	STA TEMP4		;SET SCREEN POSITION FOR CHECKSUM ERROR
	LDA I,PLYFLD+1A/100
	STA TEMP4+1
	LDA I,5
	JSR CHAR		;DISPLAY "E"
	LDA I,1
	JSR CHAR		;DISPLAY "A"
	LDA I,0
	JSR CHAR		;BLANK
	PLA
	JSR DIGIT2		;DISPLAY DIFFERENCE
	JMP 50$			;CONTINUE SELF TEST

20$:	LDA I,PLYFLD+69/100	;SET POSITION FOR NUMBER OF PLAYS
	STA TEMP4+1
	LDA I,PLYFLD+69&0FF
	STA TEMP4
	SEC			;ZERO SUPPESS
	LDA EAGAMS+2
	JSR DIGIT2		;DISPLAY 2 DIGITS
	LDA EAGAMS+1
	JSR DIGIT2		;DISPLAY 2 DIGITS
	LDA EAGAMS
	CLC			;NO MORE ZERO SUPPRESSION
	JSR DIGIT2		;DISLAY LAST 2 DIGITS
	LAL ACC1
	STA TEMP5		;WRITE OUT "PLAYS" MESSAGE
	LAH ACC1
	STA TEMP5+1
	JSR MESSAG		;WRITE "PLAYS" AFTER NUMBER
	LDA I,PLYFLD+88/100
	STA TEMP4+1		;SET STARTING ADDRESS
	LDA I,PLYFLD+88&0FF
	STA TEMP4
	LDA TEMP2
	LSR
	LSR
	LSR
	LSR
	SED
	CLC
	ADC I,0			;0 TO 15 IN DECIMAL
	CLD			;LEAVE CARRY CLEAR FOR "DIGIT2"
	SEC			;ZERO SUPPRESSION
	JSR DIGIT2		;DISPLAY MINUTES
	LDA I,2B
	JSR CHAR		;DISPLAY COLON
	LDA TEMP2
	AND I,0F
	SED
	CLC
	ADC I,0			;MAKE IT 0 TO 15
	STA TEMP2+1
	ADC TEMP2+1		;*4 TO MAKE IT REAL SECONDS
	STA TEMP2+1
	ADC TEMP2+1
	CLD
	CLC			;NO ZERO SUPPRESSION
	JSR DIGIT2		;DISPLAY SECONDS
	LAL ACC2
	STA TEMP5		;STORE ADDRESS OF MESSAGE
	LAH ACC2
	STA TEMP5+1
	JSR MESSAG		;DISPLAY "GAME TIME" MESSAGE
	LDA INPUT+3		;CHECK FOR ALL THREE SWITCHES DOWN FOR 8 FRAMES
	AND I,0D
	BNE 50$			;IF NOT ALL DOWN
	LDA EACKSM
	EOR I,0FF
	STA EACKSM		;CHANGE CHECKSUM TO REMOVE DATA
	LDA I,EACKSM-EAROM
	STA ROMA		;WRITE THIS ONE BYTE IN EA ROM
	LDA I,0			;ERASE, WRITE AND READ NEW CHECKSUM
	STA ROMC
50$:	JMP SFTEST		;LOOP WHILE TEST SW IS ON


	.SBTTL	STCOLR - SET COLORS FOR PLAYFIELD AND MOTION OBJECTS
;
;ENTRY	(X)=COLOR TO BE USED
;	(Y)=INDEX FOR WHICH OF 3 TO SELECT (1,2,3)
;USES	X,Y
STCOLR:	PHA
	TXA
	STA Y,ANCOL
	STA Y,MOCOL
	CLC
	ADC I,04
	STA Y,ANCOL+4		;EACH BANK USES DIFFERENT COLORS
	STA Y,MOCOL+4
	CLC
	ADC I,04
	STA Y,ANCOL+8
	STA Y,MOCOL+8
	CLC
	ADC I,04
	STA Y,ANCOL+0C
	STA Y,MOCOL+0C
	PLA
	RTS


BONUSC:	.BYTE 22,24,24,25,23	;COINS NEEDED FOR BONUS COIN(S)
SPEED:	.BYTE -2,-2,-1,-1	;JOYSTICK SPEED
	.BYTE 0,0,0,0
	.BYTE 0,0,0,0
	.BYTE 1,1,2,2
ACC1:	.ASCIN / PLAYS/		;ACCOUNTING MESSAGES
ACC2:	.ASCIN / GAME TIME/
DIFF:	.WORD EASIER
	.WORD EASY
	.WORD HARD
	.WORD HARDER
HARDER:	.ASCIN /HARDER/
HARD:	.ASCIN /HARD  /
EASY:	.ASCIN /EASY  /
EASIER:	.ASCIN /EASIER/
NODEMO:	.ASCIN	/    /
DEMO:	.ASCIN	/DEMO/


	.INCLUD MVCPY		;COPYRIGHT PROTECTION
	.INCLUD MVCPY		;ALLOW ROOM FOR FUTURE MODIFICATIONS

DIE:	JMP DIE			;WAIT FOR WATCHDOG

CKSUM4:	.BYTE 03B		;CHECKSUM FOR FIFTH 4K BLOCK

	.SBTTL VECTORS
	.WORD DIE,RESET,IRQ
	.REPT 1			;FOR .ROM (3M CASSETTES) USE ".REPT 0"
	.VCTRS 0FFFC,RESET
	.VCTRS 0FFF8,IRQ	;DEVELOPMENT SYSTEM "UINT"
	.ENDR

	.END
                                                                                                                                                                    