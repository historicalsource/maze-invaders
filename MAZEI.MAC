	.TITLE MAZEI - MAZE INVADERS
	.INCLUD MVDEF
	.=PROG
	JMP RESET		;USED FOR EASE OF DEVELOPMENT

CPYRHT:	.BYTE 1E		;CIRCLE C FOR COPYRIGHT
	.ASCIN /MCMLXXXI ATARI/
MAIN:	JSR INIT		;INITIALIZE
	INC COLIND		;SET FIRST COLORS
	CLI			;START IRQ
10$:	LSR SYNC
	BCC 10$			;WAIT FOR VBLANK
	BIT SLFTST
20$:	BPL 20$			;IF SELF-TEST IS ON
	STA WTCHDG		;NO WATCHDOG RESET
	JSR SETCOL		;SET COLORS
	JSR JOYSTK		;CONVERT JOYSTICK READINGS
	JSR CHKST		;CHECK FOR START OF GAME
	JSR GETINT		;GET PLAYERS INITIALS
	BPL 50$			;WE ARE ENTERING INITIALS
	JSR DISMSG		;DISPLAY MESSAGES
	JSR WRITEA		;UPDATE EAROM IF NEEDED
	LDA DELAY
	BNE 50$			;IF DISPLAYING MESSAGES
	JSR PSHOTS		;SHOOT PLAYER SHOTS
	JSR PSHOTC		;CHECK PLAYERS SHOT COLLISIONS WITH THE ALIENS 
	JSR SHOTS		;MOVE PLAYER SHOTS
	JSR APSHTC		;ALIEN SHOT AND PLAYER SHOT COLLISION
	JSR ALIENP		;ALIEN COLLISIONS WITH PLAYER
	JSR ASHOTS		;SHOOT ALIEN SHOTS
	JSR MOVEA		;MOVE ALIENS
	JSR APICT		;UPDATE ALIEN PICTURES
	JSR ASHTC		;ALIEN SHOT COLLISION WITH PLAYFIELD
	JSR ENTERA		;ENTER NEW ALIENS
	JSR MOVEH		;MOVE HEADS
	JSR ATTRCT		;MOVE PLAYERS IN ATTRACT
	JSR DEATH		;PROCESS PLAYER DEATH SEQUENCE
	JSR MOVEP		;MOVE PLAYER
	JSR COLBON		;COLLECT SPECIAL BONUS
	JSR CHKEND		;CHECK FOR END OF GAME (MUST BE AFTER "WRITEA")
	JSR FRUITS		;PROCESS FRUIT SCORES
	JSR TURNS6		;TURN ALL TURNSTILES IF NECESSARY
50$:	JSR UPSCRE		;UPDATES SCORES ON THE SCREEN
	JSR CHKDOR		;CHECK DOOR TIMER
	JSR SELECT		;SELECT STARTING MAZE
	JSR SOUNDS		;PROCESS SOUNDS
	JMP 10$

CKSUM0:	.BYTE 0FD		;CHECKSUM (FIRST 4K)
	.ASCII /TO WHOM IT MAY CONCERN:/	;ACTUALLY I DON'T KNOW HOW MANY
	.ASCII /THERE ARE 17 TRAPS HERE./	;TRAPS THERE ARE BUT SOMEONE
	.ASCII /GOOD LUCK ASSHOLE./		;WILL JUST LOVE THIS MESSAGE

	.SBTTL	ALIENP - ALIEN COLLISION WITH THE PLAYER
ALIENP:	LDA PEXPLD
	BNE 50$			;IF PLAYER IS EXPLODING
	LDA DOOR
	BMI 50$			;PLAYER HAS ENTERED DOOR
	LDX PLAYR
	LDA X,BONUST
	ORA X,BONUST+2
	BEQ 25$			;TIME HAS RUN OUT
	LDX I,NALIEN-1
10$:	LDA X,MOBJC
	BEQ 30$			;NOT AN ACTIVE ALIEN
	LDA X,MOBJA
	BMI 30$			;IF ALIEN IS FLASHING
	LDA PLAY1V
	SEC
	SBC X,MOBJV
	BCS 15$			;IF PLAY1V>=MOBJV
	JSR COMP		;COMPLEMENT
15$:	CMP I,12.
	BCS 30$			;NO COLLISION
	STA TEMP1
	LDA X,MOBJP
	AND I,3F
	TAY
	LDA PLAY1H
	CPY I,1F
	BNE 18$			;NOT A SHOT
	CLC
	ADC I,04		;SHOT IS ONLY 1 STAMP (8 BY 16)
18$:	SEC
	SBC X,MOBJH
	BCS 20$			;IF PLAY1H>=MOBJH
	JSR COMP		;COMPLEMENT
20$:	CMP I,12.
	BCS 30$			;NO COLLISION
	CPY I,1F
	BEQ 24$			;IF A SHOT
	CPY I,24
	BCC 22$			; IF NOT A 45 DEGREE SHOOTER
	CPY I,28
	BCC 25$			;IF A 45 DEGREE SHOOTER, WE HAVE A COLLISION
22$:	CLC
	ADC TEMP1
	CMP I,18.
	BCS 30$			;NO COLLISION-ROUND THE CORNERS
	BCC 25$			;ALWAYS

24$:	CMP I,9
	BCS 30$			;NOT A HIT
	ADC TEMP1
	CMP I,11.
	BCS 30$			;NOT A HIT
	LDA TEMP1
	CMP I,9
	BCS 30$			;NO COLLISION
25$:	LDX I,7F
	STX PEXPLD		;SET PLAYER EXPLOSION INDEX
	DEX			;STOP SOUND BEFORE REWRITING SCREEN
	STX CHAN+10.		;TURN ON AUDIO CHANNEL TOO
	RTS

30$:	DEX
	BPL 10$			;MORE ALIENS
50$:	RTS


MORSE:	.BYTE 002,0BB,05A,030	;MORSE CODE FOR "COPYRIGHT 1981 ATARI"
	.BYTE 05F,0EE,03D,0A8


	.SBTTL	APICT - UPDATE ALIEN PICTURES
APICT:	LDX I,NALIEN-1
60$:	LDA X,MOBJC
	BEQ 77$			;NO OBJECT
	LDA X,MOBJA
	BMI 40$			;IF ENTERING ALIEN
	AND I,40
	BNE 77$			;IF ALIEN IS ENTERING OR STUNNED
	LDA X,MOBJP
	CMP I,9F
	BNE 20$
	LDA X,ADELAY
	CMP I,18
	BCS 25$			;IF SHOT HAS A LOT OF LIFE
	LDA I,0FF		;BLUE SHOT
	BNE 28$

20$:	AND I,3F
	TAY
	CPY I,1F
	BNE 62$			;IF NOT ALIEN SHOT
25$:	LDA RND1
	AND I,03F		;RANDOMIZE SPARKLE
	ORA I,0C0		;USE PLAYERS COLORS
28$:	STA X,MOBJC
	BNE 77$			;ALWAYS

62$:	CPY I,1F
	BCC 63$			;IF NOT A ROCK
	JMP 70$

63$:	LDA PEXPLD
	BNE 78$			;NOT IF PLAYER DIES
	LDA DOOR
	BMI 78$			;NOT IF PLAYER IS IN A DOOR
	LDA FRAME
	AND I,03
	BNE 77$			;NOT TOO FAST
	LDA X,MOBJA
	CLC
	ADC I,1			;ADD 1
	AND I,07
	TAY
	LDA I,1
	CPY I,03
	BCC 64$
	BEQ 68$			;NO CHANGE IN PICTURE
	LDA I,-1
	CPY I,07
	BEQ 68$			;NO CHANGE IN PICTURE
64$:	CLC
	ADC X,ROCKP
	BPL 66$			;NO UNDERFLOW
	LDA I,11.		;ONLY 12 PICTURES
66$:	CMP I,12.
	BCC 67$			;NO OVERFLOW
	LDA I,0
67$:	STA X,ROCKP
68$:	LDY X,ROCKP
	LDA Y,95$
	STA X,MOBJP		;NEW PICTURE
	LDA Y,96$
	STA X,MOBJC		;NEW COLOR CODE
77$:	DEX
	BPL 60$
78$:	RTS

40$:	DEC X,ADELAY
	BEQ 55$			;IF ALIEN SHOULD NOW BE MATERIALIZED
	LDA X,ADELAY
	LSR
	LSR			;0 TO 0F
	STA TEMP1
	LDA X,ROCKP
	ASL
	ASL
	AND I,70		;GET INDEX FOR PICTURE TYPE
	ORA TEMP1
	TAY
	LDA Y,94$		;GET PICTURE
	STA X,MOBJP
	JMP 77$

55$:	LDA X,MOBJA
	AND I,3F		;REMOVE BEAM IN BIT
	STA X,MOBJA
	LDA I,20
	STA X,ADELAY		;DELAY BEFORE CHANGING DIRECTIONS
	LDY X,ROCKP
	TYA
	CPY I,16.
	BCC 77$			;IF NOT A ROCK
	AND I,0F
	STA X,ROCKP
	LDA I,0
	STA X,ADELAY		;DO NOT CHANGE DIRECTIONS
	BPL 77$			;ALWAYS

70$:	LDA X,ROCKP
	LSR
	LSR
	TAY
	LDA Y,99$		;FRAME RATE MASK
	AND FRAME
	BNE 76$			;NOT YET
	LDA X,ROCKP
	AND I,03
	CLC
	ADC I,01
	EOR X,ROCKP		;GET NEW INDEX SAVING OLD PICTURE CODE
	AND I,03
	EOR X,ROCKP
	STA X,ROCKP
	TAY
	LDA Y,97$
	STA X,MOBJP		;NEW PICTURE CODE
	LDA Y,98$
	BEQ 76$			;NO CHANGE
	BPL 75$			;USE THIS CODE
	AND I,3F
	EOR X,MOBJC
75$:	STA X,MOBJC		;NEW COLOR CODE
76$:	JMP 77$

90$:	.BYTE 3C,0BC,3D,0BD
	.BYTE 3E,0BE,3F,0BF
94$:	.BYTE 20,32,20,32,31,20,32,31 ;45 DEGREE SHOOTER
	.BYTE 30,32,31,30,31,30,31,30
	.BYTE 24,35,24,35,34,24,35,34 ;90 DEGREE SHOOTER
	.BYTE 33,35,34,33,34,33,34,33
	.BYTE 28,38,28,38,37,28,38,37 ;SAW BLADE
	.BYTE 36,38,37,36,37,36,37,36
	.BYTE 2C,3B,2C,3B,3A,2C,3B,3A ;RINGS
	.BYTE 39,3B,3A,39,3A,39,3A,39
	.BYTE 0C,3E,0C,3E,3D,0C,3E,3D ;ROCKS
	.BYTE 3C,3E,3D,3C,3D,3C,3D,3C
96$:	.BYTE 99,99,0A5		;COLOR CODE FOR ROCK PICTURE
	.BYTE 0A5,0A5,99
	.BYTE 99,99,0A5
	.BYTE 0A5,0A5,99
97$:	.BYTE 20,21,22,23	;PICTURE CODE
	.BYTE 24,25,26,27
	.BYTE 28,29,2A,2B
	.BYTE 2C,0AC,2D,0AD
95$:	.BYTE 0C,0D,8D		;PICTURE FOR LOWER HALF OF ROCKS
	.BYTE 0C,0D,8D		;MUST FOLLOW OTHER PICTURE CODES
	.BYTE 0DC,0DD,5D
	.BYTE 0DC,0DD,5D
98$:	.BYTE 0A2,0,0,0		;COLOR MAP BYTE
	.BYTE 0A2,0,0,0		;ZERO MEANS TO DO NOTHING
	.BYTE 0,0,0,0		;NEGATIVE MEANS TO EXCLUSIVE OR THE LOWER 6 BITS
	.BYTE 8F,0,0,0
99$:	.BYTE 7,7,1,3		;MASK FOR ADJUSTING PICTURE UPDATE RATE


	.REPT 8-.&07		;ALLIGN ON 8 BYTE BOUNDARY
	.BYTE 0
	.ENDR
	.INCLUD MVCPY		;ALLOW ROOM FOR FUTURE MODIFICATIONS
	.INCLUD MVCPY		;COPYRIGHT PROTECTION


	.SBTTL	APSHOTC - ALIEN AND PLAYER SHOT COLLISION
APSHTC:	LDX I,NALIEN-1
10$:	LDA X,MOBJC
	BEQ 30$			;NOT AN ACTIVE ENTRY
	LDA X,MOBJP
	AND I,3F
	CMP I,1F
	BNE 30$			;NOT A SHOT
	LDY I,2
15$:	LDA Y,PSHTM
	BEQ 25$			;IF NOT NOT MOVING
	LDA X,MOBJH
	CLC			;PLAYERS SHOT IS LOWER LEFT CORNER
	ADC I,03		;ALIEN SHOT IS CENTERED IN 8 X 16 STAMP
	SEC
	SBC Y,PSHTH
	BCS 18$			;IF ALIEN POSITION > PLAYER POSITION
	JSR COMP		;COMPLEMENT
18$:	CMP I,3
	BCS 25$			;TRY NEXT SHOT
	STA TEMP1
	LDA X,MOBJV
	SEC
	SBC I,7			;ALIEN AND PLAYER SHOTS ARE NOW CENTERED
	SEC
	SBC Y,PSHTV
	BCS 20$			;IF ALIEN POSITION > PLAYER POSITION
	JSR COMP		;COMPLEMENT
20$:	CMP I,3
	BCS 25$			;MISSED
	ADC TEMP1		;CHECK THE CORNERS
	CMP I,04
	BCC 50$			;A HIT
25$:	DEY
	BPL 15$			;TRY NEXT PLAYER SHOT
30$:	DEX
	CPX I,NMULT
	BCS 10$			;TRY NEXT ALIEN SHOT
	RTS

50$:	LDA I,0
	STA Y,PSHTM		;REMOVE PLAYERS SHOT
	STA X,MOBJC		;REMOVE ALIENS SHOT
	STA X,MOBJV
	STX TEMP1+1
	LDY I,1
	JSR SCORE		;ADD POINTS FOR HIT
	LDX TEMP1+1		;RESTORE X
	INC SBONUS+1		;COUNT THIS TOWARD SPECIAL BONUS
	LDA I,15.
	STA CHAN+9		;ADD EXPLOSION SOUND
	BPL 30$			;TRY NEXT COLLISION IF ANY


	.SBTTL	ASHTC-ALIEN SHOT COLLISION WITH PLAYFIELD
ASHTC:	LDA PEXPLD
	BNE 40$			;IF PLAYER IS EXPLODING
	LDA DOOR
	BMI 40$			;IF PLAYER IS IN A DOOR
	LDX I,NALIEN-1
10$:	LDA X,MOBJC
	BEQ 30$			;NOT A ACTIVE ENTRY
	LDA X,MOBJP
	AND I,3F
	CMP I,1F
	BNE 30$			;NOT A SHOT
	LDA X,MOBJV
	STA TEMP2+1
	SEC
	SBC I,08
	TAY
	LDA X,MOBJH
	CLC
	ADC I,4			;REMEMBER THE SHOT IS CENTERED IN 8 BY 16 STAMP
	STA TEMP2		;SAVE H AND V POSITIONS
	JSR OBSTAC		;CHECK PLAYFIELD
	BEQ 30$			;IF NOT THE EDGE
	LDA X,MOBJP
	CMP I,80+1F
	BEQ 50$			;IF RICHOCHET SHOT
	LDA NY,OBST
	CMP I,VTURN
	BEQ 20$			;DO NOT DESTROY TURNSTILE
	CMP I,HTURN
	BEQ 20$			;DO NOT DESTROY TURNSTILE
	CMP I,9D
	BEQ 20$			;DO NOT SHOOT OUT TURNSTILE
	LDA X,MOBJV
	CMP I,11
	BCC 20$			;DO NOT DESTROY THE OUTSIDE WALL
	CMP I,0E9
	BCS 20$			;DO NOT DESTROY THE OUTSIDE WALL
	LDA X,MOBJH
	CMP I,14
	BCC 20$			;DO NOT DESTROY THE OUTSIDE WALL
	CMP I,0E4
	BCS 20$			;DO NOT DESTROY THE OUTSIDE WALL
	LDA I,0
	STA NY,OBST		;REMOVE PLAYFIELD STAMP
20$:	LDA I,0
	STA X,MOBJC		;REMOVE OBJECT
	STA X,MOBJV		;REMOVE FROM PLAYFIELD
30$:	DEX
	CPX I,NMULT
	BCS 10$
40$:	RTS

50$:	LDA NY,OBST
	AND I,7F		;IGNORE REFLECTIONS
	CMP I,VTURN
	BEQ 60$			;WE HIT A VERTICAL WALL
	CMP I,CNTR&7F
	BEQ 56$			;IF CENTER OF TURNSTILE
	CMP I,NDOOR&7F
	BCS 56$			;IF IT HIT A DOOR
	CMP I,VER+1
	BCS 56$			;CORNERS WILL BOUNCE BACK
	CMP I,HOR+1
	BCS 60$			;WE HIT A VERTICAL WALL
55$:	LDA TEMP2
	AND I,07
	LDY I,0
	CMP I,2
	BCC 65$			;WE HIT ON THE LOWER SIDE
	LDY I,4			;ELSE UPPER SIDE
	CMP I,6
	BCC 60$			;WE HIT AN EDGE-CHECK VERTICAL
	BCS 65$			;ALWAYS

56$:	LDA X,MOBJA
	AND I,07		;OLD DIRECTION
	EOR I,04		;RETURN IN SAME DIRECTION
	BPL 68$			;ALWAYS

60$:	LDA TEMP2+1
	SEC
	SBC I,1			;CORRECT OFFSET
	AND I,07
	LDY I,08
	CMP I,2
	BCC 65$			;WE HIT RIGHT HALF OF STAMP
	LDY I,0C		;ELSE LEFT HALF
	CMP I,06
	BCS 65$
	LDA TEMP2
	AND I,07
	LDY I,0
	CMP I,02
	BCC 65$			;WE HIT THE LOWER SIDE
	LDY I,4
	CMP I,06
	BCC 30$			;JUST CONTINUE ON THRU (MUST BE A MOVING WALL)
65$:	LDA X,MOBJA
	AND I,07		;OLD DIRECTION
	LSR
	STY TEMP1
	ORA TEMP1
	TAY			;INDEX USING OLD DIRECTION AND COLLISION DIRECTION
	LDA Y,95$		;NEW DIRECTION
68$:	EOR X,MOBJA
	AND I,07
	EOR X,MOBJA		;COMBINE WITH OLD SPEED
	STA X,MOBJA
	LDA I,4
	STA CHAN+4		;TURN ON SOUND
	BNE 30$ 		;ALWAYS

95$:	.BYTE 7,5,5,7		;NEW DIRECTIONS GIVEN OLD DIRECTION
	.BYTE 1,3,3,1		;AND HORIZONTAL OR VERTICAL COLLISION
	.BYTE 3,3,5,5
	.BYTE 1,1,7,7


	.SBTTL	ASHOTS - SHOOT ALIEN SHOTS
ASHOTS:	LDA PEXPLD
	BNE 5$			;PLAYER IS EXPLODING
	LDA DOOR
	BMI 5$			;PLAYER IS IN DOOR
	LDX LEVEL
	LDA X,LEVELC
	AND I,7F
	TAY
	CPY I,8
	BCC 4$			;IF BELOW MAX
	LDY I,7
4$:	LDA Y,90$
	AND FRAME		;FREQUENCY OF SHOOTING IS FUNCTION OF DIFFICULTY
	BEQ 8$			;START SHOOTING
5$:	RTS

8$:	LDX I,NMULT-1
10$:	LDA X,MOBJC
	BEQ 40$			;NO ALIEN HERE
	LDA X,MOBJA
	AND I,0C0
	BNE 40$			;IF ALIEN IS FLASHING OR STUNNED
	LDA X,MOBJH
	CMP I,0DC
	BCS 40$			;DON'T SHOOT OFF THE SCREEN			
	CMP I,15
	BCC 40$			;DON'T SHOOT OFF THE SCREEN
	LDA X,MOBJP
	AND I,3F
	CMP I,20
	BCC 40$			;WRONG TYPE OF ALIEN
	CMP I,28
	BCS 40$			;WRONG TYPE OF ALIEN
	CMP I,24
	BCS 50$			;IF A 45 DEGREE SHOOTER
	LDA PLAY1H
	ADC I,08		;CARRY WAS CLEAR
	SEC
	SBC X,MOBJH
	ROR TEMP1		;SAVE CARRY FLAG
	AND I,0F0
	BNE 15$			;TRY VERTICAL
	LDA PLAY1V
	SEC
	SBC X,MOBJV
	LDY I,78
	BCS 25$			;IF PLAYER IS TO THE LEFT
	LDY I,7C
	BCC 25$			;ALWAYS

15$:	LDA PLAY1V
	CLC
	ADC I,08
	SEC
	SBC X,MOBJV
	AND I,0F0
	BNE 40$			;PLAYER IS NOT ON THE VERTICAL
	LDY I,7A
	BIT TEMP1
	BMI 25$			;IF PLAYER IS ABOVE ALIEN
	LDY I,7E
25$:	STY TEMP1		;SAVE DIRECTION AND STUN BIT AND SPEE
	LDA I,01
28$:	AND RND0
	BNE 40$			;RANDOMIZE SHOTS
	LDY I,NALIEN-1
30$:	LDA Y,MOBJC
	BEQ 33$			;A FREE SLOT
	DEY
	CPY I,NMULT
	BCS 30$			;LOOK FOR AN EMPTY SLOT
40$:	DEX
	BPL 10$
	RTS

50$:	LDA I,3
	BNE 28$			;ALWAYS

33$:	LDA I,10
	STA Y,ADELAY		;SET DELAY BEFORE SHOT MOVES
	STA X,ADELAY		;STOP SHOOTING ALIEN TOO
	LDA X,MOBJA
	ORA I,40
	STA X,MOBJA
	LDA X,MOBJP
	AND I,3F
	CMP I,24
	LDA I,1F
	BCC 35$			;IF A 90 DEGREE SHOOTER
	LDA RND1
	AND I,06		;GET RANDOM DIRECTION
	ORA I,79		;SET MAX SPEED AND 45 DEGREE ANGLE AND STUN BIT
	STA TEMP1
	LDA I,80+1F
35$:	STA Y,MOBJP		;SET PICTURE CODE
	LDA TEMP1
	STA Y,MOBJA		;SET ANGLE, SPEED AND STUN BITS
	AND I,07
	STX TEMP1		;SAVE X
	TAX
	PHA
	LDA X,95$		;START SHOT AT THE EDGE OF SHOOTER
	CLC
	LDX TEMP1
	ADC X,MOBJH
	STA Y,MOBJH
	PLA
	TAX
	LDA X,96$		;SAME FOR VERTICAL POSITION
	CLC
	LDX TEMP1
	ADC X,MOBJV
	STA Y,MOBJV
	LDA I,0F9		;USE SAME COLOR BANK AS PLAYER
	STA Y,MOBJC		;SPARKLE WILL CHANGE THIS
	LDA I,9
	STA CHAN+6		;TURN ON SOUND
	BNE 40$			;ALWAYS

90$:	.BYTE 1F,1F,0F,0F
	.BYTE 07,07,07
95$:	.BYTE 4,0A,0C,0A	;H OFFSET FOR STARTING POSITON
	.BYTE 4,-2,-4,-2
96$:	.BYTE 8,6,0,-6		;V OFFSET FOR STARTING POSITION
	.BYTE -8,-6,0,6


	.SBTTL	ATTRCT - ATTRACT MODE PLAYER CONTROL
ATTRCT:	LDA MODE
	BPL 90$			;IF IN GAME PLAY
	LDA DOOR
	BMI ATTRC1		;IF PLAYER IS IN DOOR
	LDA PEXPLD
	BNE ATTRC1		;IF PLAYER IS DEAD
	LDA ATTRTE
	BEQ 10$			;ALLOW CHANGE IN DIRECTIONS
	DEC ATTRTE
	BPL 40$			;ALWAYS

90$:	RTS

10$:	LDA I,0FF
	STA TEMP1+1
	LDA PLAY1H
	LDY PLAY1V
	JSR PLAYD		;GET VALID PLAYER DIRECTIONS
	LDA PLAYA
	JSR ATTRC2		;CHECK FOR PLAYFIELD OBSTACLES
	BEQ 20$			;NO WALL IN FRONT OF PLAYER
	LDA I,8
	STA ATTRTE		;SET DELAY BEFORE ALLOWING ANY NEW ANGLE CHANGES
	LDA RND0
	AND I,80
	ORA I,40		;RANDOMLY CHANGE DIRECTIONS BY 90 DEGREES
	CLC
	ADC PLAYA
	STA PLAYA
	JSR ATTRC2
	BEQ 20$			;IF NEW ANGLE IS OK
	LDA PLAYA
	EOR I,80
	STA PLAYA		;TRY OTHER DIRECTION
20$:	DEC ATTRTD
	BNE 40$			;NO TIME FOR CHANGE
	LDA I,8
	STA ATTRTE		;SET DELAY BEFORE CHANGING DIRECTIONS
	LDA RND0
	AND I,3F
	ORA I,40
	STA ATTRTD		;NEW DELAY COUNT
	LDA PLAYA
	CLC
	ADC I,0C0		;TURN RIGHT
	STA PLAYA
	JSR ATTRC2		;CHECK THAT DIRECTION
	BEQ 40$			;NEW DIRECTION IS OK
	LDA PLAYA
	CLC
	ADC I,40
	STA PLAYA		;RESTORE DIRECTION-TRY LATER
40$:	LDA I,1
	JSR MOVEP1		;MOVE PLAYER
	LDA I,0
	JSR MOVEP0		;CHANGE PLAYER PICTURES
ATTRC1	=.
	LDA I,PLYFLD+0E0&0FF
	STA TEMP4
	LDA I,PLYFLD+0E0/100
	STA TEMP4+1
	LDA I,CPYRHT&0FF
	STA TEMP5
	LDA I,CPYRHT/100
	STA TEMP5+1
	JSR MESSAG		;PUT OUT COPYRIGHT MESSAGE
	RTS


ATTRC2:	LSR
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA TEMP1
	AND X,95$		;CHECK DIRECTION OF CURRENT PLAYER ANGLE
	CMP X,95$
	RTS

95$:	.BYTE 2,0A,8,9		;DIRECTION BITS FOR PLAYER ANGLE
	.BYTE 1,5,4,6		;D3=LEFT, D2=RIGHT, D1=UP, D0=DOWN


	.SBTTL	CHGDIR-CHANGE DIRECTIONS OF ALIENS WHEN NEEDED
;
;ENTRY	(X)=INDEX OF ALIEN
;	(TEMP1)=VALID DIRECTIONS FOR A MOVE
;EXIT	(CC)=CARRY SET IF ALIEN DISAPPEARED
CHGDIR:	LDA X,MOBJP
	AND I,3F
	CMP I,1F
	BCS 50$			;IF NOT A ROCK
	LDA X,MOBJH
	CMP I,16
	BCS 35$			;WE CAN STILL GO DOWN
	TXA
	PHA
	AND I,01		;0=LEFT SIDE, 1=RIGHT
	TAX
	DEC X,ALIENS		;DECREASE ALIEN COUNT
	PLA
	TAX			;RESTORE X
	LDA I,2
	STA CHAN+11.		;ADD POP SOUND
	LDA I,0
	STA X,MOBJC		;REMOVE ROCKS
	STA X,MOBJV
	SEC
	RTS

50$:	CMP I,2C
	BCC 40$			;IF NOT TYPE 4 INVADER
	LDA X,MOBJA
	AND I,06		;GET CURRENT DIRECTION
	PHA
	LSR
	TAY
	LDA Y,95$
	AND TEMP1
	BNE 60$			;IF WE CAN GO STRAIGHT AHEAD
	LDA I,8
	STA X,ADELAY		;SET DELAY BEFORE TURNING LEFT
	PLA
	CLC
	ADC I,2			;TURN RIGHT
	AND I,06
	PHA
	LSR
	TAY
	LDA Y,95$
	AND TEMP1
	BEQ 58$			;WE CAN' TURN RIGHT
	PLA
	BPL 55$			;MOVE RIGHT

58$:	PLA
	CLC
	ADC I,04		;MOVE LEFT THEN
	AND I,06
	BPL 55$			;ALWAYS

60$:	PLA 
65$:	CLC
	RTS

35$:	LDA TEMP1
	AND I,0D
	BNE 39$			;THERE IS A WAY OUT
	LDA I,5			;IF WE CAN'T GO LEFT, RIGHT OR DOWN
	STA X,ADELAY		;POPS UP
	LDA X,MOBJA
	AND I,0F8		;DELETE OLD DIRECTION
	ORA I,02
	STA X,MOBJA
39$:	LDA X,MOBJA
	AND I,07
	CMP I,06
	BNE 40$			;WE ARE NOT GOING STRAIGHT DOWN
	LDA TEMP1
	AND I,01
	BNE 40$			;LET IT FALL
	LDA RND1
	AND I,02
	ORA I,05		;GO EITHER LEFT OR RIGHT AND DOWNWARD
55$:	EOR X,MOBJA
	AND I,7
	EOR X,MOBJA
	STA X,MOBJA		;CHANGE ROCK DIRECTION
40$:	CLC
	RTS

95$:	.BYTE 8,2,4,1		;MASK FOR VALID DIRECTION


	.SBTTL	DEATH-PLAYER DEATH SEQUENCE
;
; ENTRY	(PEXPLD)=INDEX OF PLAYER DEATH
; EXIT	(PLAYA)=80 WHEN PLAYER HAS COMPLETED DYING
; USES	A,X,Y
DEATH:	LDA PEXPLD
	BEQ 90$			;PLAYER IS ALIVE
	LDX PLAYR
	LDA X,BONUST
	ORA X,BONUST+2
	BEQ 15$			;NOT IF TIMER RUNS OUT
	LDY I,2
	LDA PLAYA
	AND I,0FE		;REMOVE ANY HYSTERISIS
	STA PLAYA
	SEC
	SBC I,80
	BEQ 20$			;IF PLAYER IS FACING DOWN
	BMI 10$			;ROTATE PLAYERS PICTURE
	LDY I,-2
10$:	TYA
	JSR MOVEP0		;MOVE PLAYER PICTURE
	JMP 15$			;WAIT FOR PLAYER TO BE IN THE RIGHT POSITION

20$:	LDA PEXPLD
	LSR
	LSR
	LSR
	TAY
	LDA Y,95$		;GET NEW PLAYERS PICTURE
	STA PLAY1P
15$:	DEC PEXPLD
	LDA PEXPLD
	BNE 30$			;NOT THE END OF THIS SEQUENCE
DEATH1	=.
	STA PLAY1C
	STA PLAY2C		;TURN PLAYER PICTURE OFF
	STA PSHTC		;SHOTS TOO
	STA PSHTC+1
	STA PSHTC+2
	RTS

30$:	LDX MODE
	BMI 90$			;NO SOUND IN ATTRACT PLEASE
	EOR I,0FF
	STA AUDF0+4		;SET AUDIO FREQUENCY
	LDA I,0A8
	STA AUDC0+4		;TURN ON VOLUME TOO
90$:	RTS

95$:	.BYTE 57,57,57,56,57,56,55	;EYE CLOSING PICTURE SEQUENCE
	.BYTE 57,56,55,50,56,55,50
	.BYTE 55,50

	.SBTTL	ENTERA - ENTER ALIENS
ENTERA:	LDA DOOR
	BMI 20$			;IF PLAYER IS IN DOOR
	LDA PEXPLD
	BNE 20$			;IF PLAYER IS DEAD
	LDA FRAME
	AND I,3F
	BNE 20$			;EVERY SECOND OR SO
	LDY LEVEL		;Y=CURRENT MAZE NUMBER
	LDX I,0
	LDA ALIENS
	BEQ 15$			;NO ALIENS ON THE LEFT
	INX
	LDA ALIENS+1
	BEQ 15$			;NO ALIENS ON THE RIGHT
	CLC
	ADC ALIENS
	STA TEMP1
	JSR INITA3		;GET VALUE BASED ON SCORE
	LDA TEMP1
	CMP TEMP1+1
	BCS 20$			;ENOUGH ALIENS ON THE SCREEN NOW
	LDY LEVEL
	LDA TEMP1
	CMP Y,ALMIN
	BCS 9$			;NOT BELOW MINIMUM NUMBER OF ALIENS
	LDX I,NALIEN-1		;SPEED UP REMAINING ALIENS
6$:	LDA X,MOBJC
	BEQ 8$			;NO ALIEN HERE
	LDA X,MOBJP
	AND I,3F
	CMP I,20
	BCC 8$			;IF A SHOT OR A ROCK
	LDA X,MOBJA		;SET NEW SPEED
	CLC
	ADC I,08		;INCREASE SPEED
	CMP I,30
	BCS 8$			;DON'T OVER DO IT
	STA X,MOBJA
8$:	DEX
	BPL 6$
9$:	LDX I,0			;USE LOWEST ENTRIES FIRST
10$:	LDA X,MOBJC
	BEQ 15$			;WE FOUND AN ENTRY
	INX
	CPX I,NMULT
	BCC 10$			;LOOK SOME MORE
20$:	RTS

15$:	LDA Y,LEVELC
	AND I,7F
	CMP I,07
	BCC 18$			;IF BELOW MAX
	LDA I,06
18$:	ASL
	ASL
	ASL
	STA TEMP1		;STARTING SPEED
	JMP INITA0		;START AN ALIEN


	.SBTTL	INITA - INITIALIZE ALIENS
INITA:	JSR INITA3		;GET MIN NUMBER BASED ON SCORE
	LDY LEVEL
	LDA Y,ALCNT
	CMP TEMP1+1
	BCC 35$			;GET MIN (ALCNT,VALUE BASED ON SCORE)
	LDA TEMP1+1
35$:	STA TEMP3		;NUMBER OF ALIENS
	LDA Y,LEVELC
	AND I,7F
	CMP I,07
	BCC 40$			;LESS THAN 5 TIMES ON THIS LEVEL
	LDA I,06
40$:	ASL
	ASL
	ASL
	STA TEMP1		;STARTING SPEED
	LDA I,0
	STA ALIENS
	STA ALIENS+1
	LDX I,NALIEN
50$:	STA X,MOBJC-1		;REMOVE SHOTS
	STA X,MOBJV-1		;REMOVE FROM SCREEN
	DEX
	CPX TEMP3
	BNE 50$
	DEX
	BMI 90$			;IF NUMBER OF ALIENS IS ZERO
60$:	LDY LEVEL		;LEVEL NUMBERS
	JSR INITA0		;SET ALIEN PARAMETERS
	DEX
	BPL 60$			;MORE OBJECTS
90$:	RTS

; ENTRY	(X)=ALIEN INDEX
;	(LEVEL)=MAZE NUMBER
;	(TEMP1)=SPEED FOR THIS ALIEN
; USES	A,Y,(TEMP1+1)
INITA0:	LDY LEVEL
	STX TEMP1+1
	LDA Y,LEVELC
	AND I,7F
	SEC
	SBC I,04
	BMI 10$			;HE HAS ONLY BEEN HERE 3 TIMES OR LESS
	CMP TEMP1+1
	BCC 10$			;DON'T CHANGE THE ALIEN TYPE
	LDA I,4			;USE 45 DEGREE SHOOTER
	BNE 20$			;ALWAYS

10$:	TYA
	ASL
	ASL
	ASL
	ORA TEMP1+1			;INDEX FOR THIS ALIEN
	TAY				;0 TO 7F
	LDA Y,ALTYP			;GET ALIEN TYPE INDEX
20$:	STA TEMP2			;SAVE ALIEN INDEX

;ENTRY	(X)=ALIEN INDEX
;	(TEMP2)=PICTURE INDEX FOR DESIRED ALIEN
;	(TEMP1)=SPEED FOR THIS ALIEN
;USES	A,Y
INITA1:	LDA RND1
	AND I,07
	PHA
	TXA
	LSR
	PLA
	BCC 20$			;EVEN IF WE ARE ON THE LEFT
	ORA I,08
20$:	TAY
	JSR INITA2		;MAKE SURE ALIENS DO NOT START IN THE SAME POSITION
	LDA Y,VPOS
	STA X,MOBJV
	LDA TEMP2
	STA X,ROCKP
	LSR
	LSR
	TAY
	LDA Y,90$		;SET COLOR BANK
	STA X,MOBJC
	LDA I,40		;SET DELAY SO PICTURE CODE IS CORRECT
	STA X,ADELAY		;DELAY BEFORE ENTERING ALIEN
	LDA RND1
	ORA I,82		;UP OR DOWN ONLY TO START
	AND I,86		;SET BIT FOR ENTERING ALIEN
	LDY TEMP2
	ORA TEMP1
	CPY I,16.
	BCS 50$			;ROCKS START AT TOP ONLY
	CPY I,8.
	BCC 25$			;IF NOT TYPE 3 OR 4 INVADER
	AND I,07		;DIRECTION
	ORA I,0A8
	LDY TEMP1
	CPY I,18
	BCC 25$			;FAST SPEED
	EOR I,18		;VERY FAST
25$:	STA X,MOBJA
	LSR
	LSR
	LSR
	LDA I,08
	BCC 30$			;IF GOING UP
28$:	LDA I,0E7
30$:	STA X,MOBJH		;SET STARTING HORIZONTAL POSITION
	LDA I,15.
	STA CHAN+1		;BEAM IN SOUND
	TXA
	LSR
	BCS 40$			;ADD FOR RIGHT SIDE
	INC ALIENS
	RTS

40$:	INC ALIENS+1
	RTS

50$:	LDA I,0AE
	STA X,MOBJA		;ROCKS ARE ALWAYS FAST
	BMI 28$			;ALWAYS

90$:	.BYTE 39,39,99,79,99	;BANK AND COLOR CODES
VPOS:	.BYTE 0E8,0E8,0D0,0D0
	.BYTE 0B8,0B8,0A0,0A0
	.BYTE 78,60,48,48
	.BYTE 30,30,18,18


;
; ENTRY	(Y)=INDEX FOR "VPOS"
;	(CC)=CARRY SET OR CLEAR FOR LEFT OR RIGHT SIDE
; EXIT	(Y)=INDEX FOR "VPOS"
; USES	A,Y,(TEMP1+1)
INITA2:	STX TEMP1+1
	LDA I,0
	STA X,MOBJV		;CLEAR CURRENT OBJECT POSITION
	ROL			;0 OR 1
	TAX
10$:	LDA X,MOBJA
	BPL 20$			;IF NOT AN ENTERING ALIEN
	LDA X,MOBJV
	CMP Y,VPOS
	BNE 20$
	TXA
	AND I,01
	TAX			;RESTART X
	INY			;NEXT POSITION
	CPY I,8
	BNE 12$			;NO OVERFLOW FOR LEFT SIDE
	LDY I,0
12$:	CPY I,10
	BNE 15$			;NO OVERFLOW FOR RIGHT SIDE
	LDY I,8
15$:	BNE 10$			;ALWAYS - TRY AGAIN

20$:	INX
	INX
	CPX I,NMULT
	BCC 10$			;CHECK ALL SLOTS
	LDX TEMP1+1		;RESTORE X
	RTS


;
; 	THIS ROUTINE DETERMINES THE NUMBER OF
; 	ALIENS THAT SHOULD APPEAR
; 
;ENTRY	(X)=PLAYER INDEX
INITA3:	LDX PLAYR
	LDY I,8
	LDA X,SCORE2
	BIT OPTNS
	BMI 20$			;IF HARD SETTING
	CMP I,10
	BCS 10$			;IF MORE THAN 100,000
	DEY
	CMP I,5
	BCS 10$			;IF MORE THAN 50,000
	DEY
	CMP I,2
	BCS 10$			;IF MORE THAN 20,000
	DEY
	CMP I,10
	BCS 10$			;IF MORE THAN 10,000
	DEY
	LDA X,SCORE1
	CMP I,60
	BCS 10$			;IF MORE THAN 6,000
	DEY
	CMP I,30
	BCS 10$			;IF MORE THAN 3,000
5$:	DEY
10$:	STY TEMP1+1		;MIN NUMBER OF ALIENS
	RTS

20$:	CMP I,8
	BCS 10$			;IF MORE THAN 80,000
	DEY
	CMP I,4
	BCS 10$			;IF MORE THAN 40,000
	DEY
	CMP I,2
	BCS 10$			;IF MORE THAN 20,000
	DEY
	CMP I,1
	BCS 10$			;IF MORE THAN 10,000
	DEY
	LDA X,SCORE1
	CMP I,50
	BCS 10$			;IF MORE THAN 5000
	BCC 5$			;ALWAYS


	.SBTTL	INITB-INITIALIZE BONUS TIMER
INITB:	LDX PLAYR
	LDY LEVEL
	LDA X,BONUST+2
	ORA X,BONUST
	BEQ 10$
	LDA X,BONUST+2
	CMP I,8
	BCS 20$			;PLAYER HAS ENOUGH LEFT
	LDA I,8
	BNE 15$			;ALWAYS

10$:	LDA Y,IBONUS		;GET TIMER FOR THIS MAZE
15$:	STA X,BONUST+2
	LDA I,0
	STA X,BONUST
20$:	RTS


	.SBTTL	INITM - INITIALIZE THE MAZE
INITM:	LDY LEVEL
	LDA Y,HDCNT
	STA TEMP1
	LDA I,0
	LDX I,NHEADS-1
5$:	CPX TEMP1
	BCC 8$			;REMOVE ALL UNUSED MAZE ENTRIES
	STA X,HEADH
	DEX
	BPL 5$
	RTS			;IF NO MAZE ENTRIES WE ARE CLOSE

8$:	LDA Y,HDTYPE
	AND I,0C0
	BNE 60$			;IF NOT CIRCULAR MAZES
10$:	TXA
	LSR
	BCS 12$			;IF A HEAD
	LDA RND1		;RANDOM DIRECTION
	EOR TEMP1+1		;PREVIOUS INDEX
	AND I,03
	BNE 11$			;DON'T START AT SAME SPOT
	LDA I,2
11$:	EOR TEMP1+1		;GET NEW STARTING INDEX
	BPL 20$			;ALWAYS

12$:	LDA RND0
	AND I,0F
	STA TEMP1+1		;SAVE INDEX FOR TAIL
20$:	CMP I,04
	BCS 22$			;DO NOT USE INNER MOST MAZE
	ADC I,08		;USE MIDDLE CIRCULAR MAZE
22$:	TAY
	AND I,03
	STA TEMP1		;SAVE CLOCKWISE DIRECTION
	LSR			;GIVEN Y=INDEX INTO TABLE 95$
	PHP
	LDA I,78
	PLP
	BCS 30$			;IF GOING VERTICAL
	STA X,HEADV		;SET POSITION
	LDA Y,95$
	STA X,HEADH
	JMP 40$

30$:	STA X,HEADH
	LDA Y,95$
	STA X,HEADV
40$:	LDA RND1
	AND I,02
	EOR TEMP1
	CMP TEMP1
	BNE 45$			;CONTERCLOCKWISE
	ORA I,08		;SET CLOCKWISE BIT
45$:	ASL
	ASL
	ASL
	ASL
	STA TEMP1
	TXA			;SPEED DEPENDENT ON THE INDEX
	LSR			;TO PREVENT CLOSED LOOPS
	ORA TEMP1
	STA TEMP1
	TXA
	LSR			;SAME NUMBER OF HEADS AS TAILS
	LDA TEMP1
	BCC 50$			;IF A TAIL
	ORA I,40		;SET HEAD/TAIL BIT
50$:	STA X,HEADS		;SET STATUS BYTE
	DEX
	BPL 10$			;MORE HEADS/TAILS
	RTS

60$:	STA TEMP1
65$:	LDA RND1		;X MUST BE EVEN
	AND I,7E		;MUST BE EVEN
	CLC
	ADC I,60		;HEAD STARTING POSITION
	PHA
	SEC
	SBC I,40		;TAIL STARTING POSITION
	PHA
	TXA			;LET INDEX CONTROL POSITION
	AND I,0E
	TAY
	LDA RND1
	AND I,27		;RANDOM SPEED AND DIRECTION
	BIT TEMP1
	BVC 70$			;IF HORIZONTAL
	BPL 68$			;IF NOT INTERMIXED
	BIT RND1		;GET RANDOM DIRECTION
	BMI 70$			;IF HORIZONTAL
68$:	INY
	ORA I,50		;UP OR DOWN HEAD ONLY
	STA X,HEADS
	LDA Y,95$		;STARTING V FOR BOTH HEAD AND TAIL
	STA X,HEADV
	STA X,HEADV-1
	PLA
	STA X,HEADH-1		;TAIL STARTING H POSITION
	PLA
	STA X,HEADH		;HEAD H POSITION
	LDA RND0
	AND I,27		;RANDOM SPEED
	ORA I,10		;TAIL-UP OR DOWN ONLY
	STA X,HEADS-1
	BNE 75$			;ALWAYS

70$:	ORA I,40
	STA X,HEADS		;HEAD-LEFT OR RIGHT
	LDA Y,95$		;SARTING H FOR BOTH HEAD AND TAIL
	STA X,HEADH
	STA X,HEADH-1
	PLA
	STA X,HEADV-1		;TAIL STARTING V POSITION
	PLA
	STA X,HEADV		;HEAD STARTING V POSITION
	LDA RND0
	AND I,27
	STA X,HEADS-1		;TAIL-LEFT OR RIGHT ONLY
75$:	DEX
	DEX
	BPL 65$			;DO ALL HEAD/TAIL PAIRS
	RTS

95$:	.BYTE 76,08A,088,68
	.BYTE 5E,0A2,0A0,50
	.BYTE 46,0BA,0B8,38
	.BYTE 2E,0D2,0D0,20


	.SBTTL	INITP - INITIALIZATION FOR PLAYER
INITP:	LDA DOOR
	BMI 5$			;IF PLAYER JUST ENTERED A DOOR
	LDA I,80
	STA PLAYA		;RESET ANGLE
5$:	LDA I,0F9		;SET PLAYER COLOR BANK
	STA PLAY1C
	STA PLAY2C
	LDA I,80		;NEW HORIZONTAL
	TAX			;NEW VERTICAL
	LDY LLEVEL
	CPY I,7F
	BCS 50$			;START PLAYER IN THE MIDDLE
	LDA LEVEL
	ASL
	ASL
	ORA I,03
	TAY
	LDX I,3
10$:	LDA Y,MAP
	CMP LLEVEL
	BEQ 15$			;WE FOUND THE DOOR WE CAME THRU
	DEY
	DEX
	BNE 10$			;TRY OTHER DOOR
15$:	LDA Y,MAP
	AND I,07
	TAY
	CPX I,02
	BCC 30$			;IF ON LEFT OR RIGHT
	BEQ 20$			;IF ON TOP
	LDX Y,90$
	LDA I,20
	LDY I,0
	BEQ 40$			;ALWAYS

20$:	LDX Y,90$		;VERTICAL
	LDA I,0E0		;HORIZONTAL
	LDY I,80		;ANGLE
	BNE 40$			;ALWAYS

30$:	DEX
	BMI 35$			;ON THE LEFT
	LDA Y,91$
	LDX I,18
	LDY I,40
	BNE 40$			;ALWAYS

35$:	LDA Y,91$
	LDX I,0E8
	LDY I,0C0
40$:	STY PLAYA		;NEW ANGLE
50$:	STX PLAY1V
	STX PLAY2V
	STA PLAY2H
	SEC
	SBC I,08
	STA PLAY1H
	LDX I,02
70$:	LDA I,0F
	STA X,PSHTP		;SET PICTURE CODE
	LDA I,0C1
	STA X,PSHTC		;SET COLOR
	LDA I,0
	STA X,PSHTM		;NO MOTION
	DEX
	BPL 70$
	STA FEET		;RESET PLAYERS FOOT PICTURE
	STA TIMER		;RESET WALKING SOUND COUNTER
	JMP MOVEP0		;RESET PLAYER PICTURES AND SHOT POSITIONS

90$:	.BYTE 0D4,0BC,0A4,8C	;VERTICAL POSITION
	.BYTE 74,5C,44,2C
91$:	.BYTE 24,3C,54,6C	;HORIZONTAL POSITION
	.BYTE 84,9C,0B4,0CC


	.SBTTL	INITPS - INITIALIZE PLAYERS SHOT.
;
;ENTRY	(X)=WHICH SHOT ARE WE DEALING WITH
;	(PLAYA)=PLAYERS ANGLE
;	(PLAY1H)=PLAYERS H POSITION
;	(PLAY1V)=PLAYERS V POSITION
;USES	A,Y
INITPS:	LDA PLAYA
	LSR
	LSR
	LSR
	LSR
	TAY			;Y=WHICH PLAYER ANGLE WE ARE DEALING WITH
	LDA Y,90$
	CLC
	ADC PLAY1H
	STA X,PSHTH		;SHOT H POSITION
	LDA Y,95$
	CLC
	ADC PLAY1V
	STA X,PSHTV		;SHOT V POSITION
	RTS

90$:	.BYTE 16.,16.,14.,11.,7,3,0,-2	;H OFFSET
	.BYTE -2,-2,0,3,7,11.,14.,16.
95$:	.BYTE -7,-3,0,2,2,2,0,-3	;V OFFSET
	.BYTE -7,-11.,-14.,-16.,-16.,-16.,-14.,-11.


	.SBTTL	INITS - INITIALIZE FRUIT
INITS:	LDX I,NBONUS-1
	LDA I,0
5$:	STA X,SBONUS		;RESET ALL SECRET BONUS FLAGS
	DEX
	BPL 5$
	STX SBONUS+5
	STX SBONUS+6
	STX FRUITT		;CLEAR LAST FRUIT FLAG
	STA FRUITC		;DON'T ERASE ANY SCORES
	LDA $CMODE
	AND I,0C3
	CMP I,0C0
	BEQ INITD		;IF IN DEMO MODE
	LDY LEVEL
	LDX PLAYR
	LDA I,8
	BIT OPTNS
	BVC 6$			;IF "EASIER" "OR" HARD
	LDA I,10.		;IF "EASY" OR "HARDER"
6$:	STA TEMP1
	LDA X,SCORE2
	AND I,0E
	LSR			;EVERY 20K UP TO 100K ADD ONE FRUIT
	ADC TEMP1
	CLC
	ADC Y,LEVELC		;NOTE THAT D7 CAN BE SET
	ADC Y,LEVELC		;MIN + 2*NUMBER OF TIMES IN THIS MAZE
	AND I,7F		;NOTE THAT IF D7=1 THEY WILL CANCEL OUT NOW
	CMP I,33.		;THE CASE WHERE D7=1 WILL CANCELL OUT
	BCC 8$
	LDA I,32.
8$:	STA FRUIT		;SET NUMBER OF FRUIT
	STA TEMP1+1
10$:	JSR INITS1		;GET FRUIT POSITION
	LDA RND0
	AND I,03		;GET 1 OF 4 PICTURES
	ORA I,STR		;IF RANDOM NUMBERS ARE STUCK-RESET WILL OCCUR
	STA NY,OBST		;WRITE A FRUIT THERE
	DEC TEMP1+1
	BNE 10$			;MORE STARS
	LDA LEVEL
	LDX PLAYR
	CMP X,MELON
	BNE 50$			;NO WATERMELON IN THIS MAZE
	JSR INITS1		;GET FRUIT POSITION
	BIT CKIND
	BPL 40$			;IF NOT COCKTAIL
	LDY I,0			;FLIP PICTURE ORDER
40$:	LDA I,STR+5
	STA NY,OBST		;LEFT HALF OF PICTURE
	TYA
	EOR I,20
	TAY
	LDA I,STR+4
	STA NY,OBST		;RIGHT HALF OF PICTURE
	INC FRUIT		;INCREASE FRUIT COUNT
50$:	RTS


INITS1	=.
	LDA RND1
	AND I,0F
	TAX
	LDA X,VPOS		;GET RANDOM VERTICAL POSITION
	TAY
	LDA RND1
	AND I,0F
	TAX
	LDA X,HPOS		;GET RANDOM HORIZONTAL POSITION
	AND I,0F8
	JSR OBSTAC		;GET PLAYFIELD ADDRESS
	LDY I,20
	LDA NY,OBST
	CMP I,STR
	BCS INITS1		;DO NOT PUT A FRUIT ON A FRUIT
	RTS

INITD:	LDA I,24.
	STA CHAN+14.		;TURN ON SOUNDS
	LDA I,0F0
	STA CNTDWN		;SET FREQUENCY OF COUNTDOWN TIMER
	LDA I,7F
	STA DOOR		;SET DOOR FLAG
	RTS

HPOS:	.BYTE 0D8,0D8,0C0,0C0	;H POSITIONS FOR STARS
	.BYTE 0A8,0A8,90,90
	.BYTE 78,60,48,48
	.BYTE 30,30,18,18


	.SBTTL	INITSC - INITIALIZE SCREEN
INITSC:	LDX I,0
	TXA
5$:	STA X,PLYFLD
	STA X,PLYFLD+100
	STA X,PLYFLD+200
	CPX I,0C0
	BCS 7$
	STA X,PLYFLD+300
7$:	DEX
	BNE 5$			;CLEAR SCREEN
	INC COLIND		;NEW COLORS THIS WAVE
	LDA I,VER
	LDX I,26.
10$:	STA X,PLYFLD+3		;LEFT EDGE
	STA X,PLYFLD+3A3	;RIGHT EDGE
	DEX
	BPL 10$
	LDA I,PLYFLD+22&0FF
	STA TEMP4
	LDA I,PLYFLD+22/100
	STA TEMP4+1
20$:	LDA I,HOR
	LDY I,1B
	STA NY,TEMP4		;TOP ROW
	LDY I,0
	STA NY,TEMP4		;BOTTOM ROW
	LDA TEMP4
	CLC
	ADC I,20
	STA TEMP4
	BCC 22$			;NO CARRY
	INC TEMP4+1
22$:	CMP I,PLYFLD+3A0&0FF
	BCC 20$
	LDA TEMP4+1
	CMP I,PLYFLD+3A0/100
	BCC 20$
	LDA I,LLFT
	LDY I,ULFT
	BIT CKIND
	BPL 24$			;IF NOT COCKTAIL
	LDA I,URHT		;"VIDROT" ROTATES CORNERS SO USE DIFFERENT STAMPS
	LDY I,LRHT
24$:	STA PLYFLD+2		;PUT OUT THE CORNERS
	STY PLYFLD+1D
	LDA I,LRHT
	LDY I,URHT
	BIT CKIND
	BPL 26$			;IF NOT COCKTAIL
	LDA I,ULFT		;USE OTHER CORNER PICTURES
	LDY I,LLFT
26$:	STA PLYFLD+3A2
	STY PLYFLD+3BD
	LDX MODE
	INX
	CPX I,03
	BCS 30$			;IF SELECTING MAZES
	LDA I,12.
	JSR MESS		;DISPLAY "BONUS"
	LDA I,13.
	JSR MESS		;DISPAY "MAZE"
30$:	LDA DELAY
	BNE 90$			;IF WE ARE DISPLAYING MESSAGES
	LDA I,PLYFLD+1C3&0FF
	STA TEMP1
	LDA I,PLYFLD+1C3/100
	STA TEMP1+1
	LDY I,25.
	LDA I,BLK
50$:	STA NY,TEMP1		;PUT UP MUD TO SPLIT THE SCREEN IN THE MIDDLE
	DEY
	BPL 50$
	LDA LEVEL		;CURRENT LEVEL
	ASL
	TAX
	LDA X,LEVS
	STA TEMP1		;TEMP1=ADDRESS OF TABLE
	LDA X,LEVS+1
	STA TEMP1+1
58$:	LDY I,0
	STY DOOR		;CLEAR DOOR FLAG NOW
60$:	LDA NY,TEMP1
	BEQ 90$			;END OF LIST
	BPL 65$			;IF COUNT FOLLOWED BY ADDRESS
	INY
	LDA NY,TEMP1		;GET POSITIVE DIRECTION
	STA TEMP2
	INY
	LDA NY,TEMP1		;GET STAMP CODE
	STA TEMP2+1
	TYA
	SEC
	ADC TEMP1
	STA TEMP1
	BCC 58$			;NO OVERFLOW
	INC TEMP1+1
	BNE 58$			;ALWAYS

65$:	TAX
	INY
	LDA NY,TEMP1
	STA TEMP4
	INY
	LDA NY,TEMP1
	STA TEMP4+1
	STY TEMP3		;SAVE Y
	LDY I,0
70$:	LDA TEMP2+1
	STA NY,TEMP4		;STORE INTO PLAYFIELD
	LDA TEMP4
	CLC
	ADC TEMP2
	STA TEMP4		;NEW PLAYFIELD ADDRESS
	LDA TEMP4+1
	ADC I,0
	STA TEMP4+1
	DEX
	BNE 70$			;MORE PLAYFIELD TO WRITE
	LDY TEMP3
	INY
	BNE 60$			;ALWAYS (MUST FIT IN ONE PAGE

90$:	RTS

TRAP0:	.BYTE 6F,5F,0E0,0DF	;"PROGRAMMED BY ED LOGG" IN MORSE
	.BYTE 5F,40,0C0,0C0	;0=DOT, 1=DASH
	.BYTE 7F,9F,8F,0B0	;FILL REST OF WORD WITH OPPOSITE OF LAST VALUE
	.BYTE 7F,9F,4F,0E0
	.BYTE 0DF,0DF
	.PAGE

	.SBTTL	MOVEA - MOVE ALIENS
MOVEA:	LDA PEXPLD
	BEQ 5$			;IF PLAYER IS ALIVE
2$:	RTS

5$:	LDA DOOR
	BMI 2$			;PLAYER IS IN DOOR
	LDX I,NALIEN-1
10$:	LDA X,MOBJC
	BEQ 15$			;NOT AN ALIEN
	LDY X,MOBJA
	BPL 30$			;IF NOT JUST ENTERING

15$:	JMP 65$

30$:	LDA I,0F		;ALL DIRECTIONS ARE VALID FOR A SHOT
	STA TEMP1
	LDA X,ADELAY
	BEQ 35$			;NO COUNTDOWN TIMER
	DEC X,ADELAY
	BNE 35$			;DO NOT CHANGE DIRECTION YET
	JSR NEWDIR		;NEW ALIEN DIRECTION
35$:	LDA X,MOBJA
	AND I,40
	BNE 15$			;NO MOTION FOR STUNNED INVADERS
	LDA X,MOBJP
	AND I,3F
	CMP I,1F
	BEQ 40$			;IF A SHOT
	LDY X,MOBJV
	LDA I,7F
	STA TEMP1+1		;DO NOT GO THRU TURNSTILES
	LDA X,MOBJH
	JSR PLAYD		;GET ALL VALID DIRECTIONS
	LDY X,MOBJV
	CPX I,NMULT
	BCS 39$			;IF NOT A MULTIPLEXED ALIEN
	TXA
	LSR
	BCC 36$			;IF ON LEFT SIDE
	CPY I,7A
	BCC 39$			;IF NOT UP AGAINST THE EDGE
	LDA TEMP1
	AND I,07		;LEFT IS NOT A VALID DIRECTION
	STA TEMP1
	BPL 39$			;ALWAYS

36$:	CPY I,8F
	BCS 39$			;NOT UP AGAINST THE EDGE
	LDA TEMP1
	AND I,0B		;RIGHT IS NOT A VALID DIRECTION
	STA TEMP1
39$:	JSR CHGDIR		;CHECK FOR CHANGE IN DIRECTIONS
	BCS 65$			;ALIEN DISAPPEARED
40$:	LDY X,MOBJA		;DIRECTION AND SPEED
	LDA I,1
	JSR MOVEA1		;GET SPEED
	BCS 45$			;NO MOVE IN THIS DIRECTION
	ADC X,MOBJHL		;LSB OF HORIZONTAL
	STA X,MOBJHL
	TYA
	ADC X,MOBJH		;NEW H POSITION
	CMP I,08
	BCC 45$			;DO NOT LET ALIENS ENTER DOORS
	CMP I,0E8
	BCS 45$			;DO NOT LET ALIENS ENTER DOORS
	STA X,MOBJH		;NEW HORIZONTAL POSITION
45$:	LDA X,MOBJA
	STA TEMP1+1
	CLC
	ADC I,02		;SIN (90 DEGREE + ANGLE)=COS (ANGLE)
	EOR TEMP1+1
	AND I,07
	EOR TEMP1+1		;OLD SPEED + NEW ANGLE
	TAY
	LDA I,0
	JSR MOVEA1		;GET SPEED
	BCS 65$			;NO MOVE THIS DIRECTION
	ADC X,MOBJVL		;LSB OF VERTICAL
	STA X,MOBJVL
	TYA
	ADC X,MOBJV		;NEW V POSITION
	CMP I,0F2
	BCS 65$			;DO NOT LET ALIENS ENTER DOORS
	CMP I,0F
	BCC 65$			;DO NOT LET ALIENS ENTER DOORS
	TAY
	CPX I,NMULT
	BCS 60$			;IF OBJECT IS NOT MULTIPLEXED
	TXA
	LSR
	BCC 70$			;EVEN IF ON THE LEFT SIDE
	CPY I,7B
	BCC 60$			;DON'T GO ON THE WRONG SIDE
	LDY I,7A
60$:	STY X,MOBJV
65$:	DEX
	BMI 90$			;IF ALL DONE
	JMP 10$

70$:	CPY I,8E
	BCS 60$			;DON'T GO ON THE WRONG SIDE
	LDY I,8F
	BNE 60$			;ALWAYS

90$:	RTS
95$:


;ENTRY	(X)=ALIEN INDEX
;	(A)=0 FOR LEFT/RIGHT DIRECTIONS
;	(Y)=INDEX DIRECTION AND SPEED)
;	(TEMP1)=VALID DIRECTIONS FOR MOVE
;EXIT	(CC)=CARRY CLEAR TO MOVE
;	(A)=LSB TO MOVE
;	(Y)=MSB TO MOVE
;	(TEMP1)=SHIFTED RIGHT TWO POSITIONS
;USES	A,Y,TEMP1,TEMP1+1
MOVEA1:	STA TEMP1+1
	LDA Y,91$
	BEQ 50$			;NO MOTION
	PHA
	AND I,0F
	CMP I,08
	BCC 10$			;SIGN EXTEND
	ORA I,0F0
10$:	TAY			;MSB OF SPEED
	PLA
	AND I,0F0		;LSB OF SPEED
	LSR TEMP1
	BCC 11$			;WE CAN'T GO RIGHT OR DOWN
	CPY I,80
	BCS 20$			;MOVE RIGHT OR DOWN
11$:	LSR TEMP1
	BCC 12$			;WE CAN'T GO LEFT OR UP
	CPY I,80
	BCC 18$			;MOVE LEFT OR UP
12$:	LDA TEMP1+1
	BEQ 13$			;IF WE ARE GOING LEFT OR RIGHT
	LDA X,MOBJP
	AND I,3F
	CMP I,1F
	BCC 15$			;NO CHANGE IN DIRECTION FOR ROCKS
13$:	LDA I,1
	STA X,ADELAY		;CHANGE DIRECTIONS NEXT TIME
15$:	SEC
18$:	RTS

20$:	LSR TEMP1		;LEAVE "TEMP1" FOR NEXT CALL TO "MOVEA1"
	CLC
	RTS

50$:	LSR TEMP1		;LEAVE "TEMP1" FOR NEXT CALL TO "MOVEA1"
	LSR TEMP1
	SEC
	RTS

91$:	.BYTE 0,60,60,60,0,0AF,0AF,0AF	;HORIZONTAL SPEED
	.BYTE 0,80,80,80,0,8F,8F,8F	;D0-D3=MSB,D4-D7=LSB
	.BYTE 0,0A0,0A0,0A0,0,6F,6F,6F	;VERTICAL SPEED IS OFFSET BY 2
	.BYTE 0,0C0,0C0,0C0,0,4F,4F,4F
	.BYTE 0,0E0,0E0,0E0,0,2F,2F,2F
	.BYTE 0,1,1,1,0,0F,0F,0F
	.BYTE 0,21,21,21,0,0EE,0EE,0EE
	.BYTE 0,81,81,81,0,08E,08E,08E	;SHOT SPEED


	.SBTTL	MOVEF - MOVE PLAYERS FEET
;
; ENTRY	(FEET)=STATE OF PLAYERS FEET
;	(PLAY1H)=PLAYERS HORIZONTAL POSITION
;	(PLAY1V)=PLAYERS VERTICAL POSITION
;	(PLAY1P)=PLAYERS PICTURE
; EXIT	(FOOTC)=FOOT COLOR
;	(FOOTP)=FOOT PICTURE
;	(FOOTH)=FOOT HORIZONTAL POSITION
;	(FOOTV)=FOOT VERTICAL POSITION
;USES	A,Y,TEMP1
MOVEF:	LDA FEET
	AND I,1C
	LSR
	EOR PLAYA		;COMBINE 4 BITS OF ROTATION TO FEET POSITION
	AND I,0F
	EOR PLAYA
	TAY			;INDEX INTO OFFSET TABLE
	AND I,6
	BEQ 40$			;NO FEET NOW
	LDA Y,90$
	CLC
	ADC PLAY1H
	STA FOOTH		;FOOT H POSITION
	LDA Y,90$+1
	CLC
	ADC PLAY1V
	STA FOOTV		;FOOT V POSITION
	LDA I,81
30$:	STA FOOTC		;FOOT COLOR CODE
	LDA I,08
	STA FOOTP		;FOOT PICTURE CODE
	RTS

40$:	STA FOOTV		;OFF THE SCREEN
	BEQ 30$			;ALWAYS

90$:	.BYTE 0,0,9,1,0D,0,0C,-2	;0 DEGREES - LEFT FOOT
	.BYTE 0,0,9,-0C,0D,-0B,0C,-9	;RIGHT FOOT
	.BYTE 0,0,6,2,0A,3,0A,01	;22 DEGREES
	.BYTE 0,0,0B,-0B,0E,-8,0D,-6
	.BYTE 0,0,3,2,7,4,8,2		;45 DEGREES
	.BYTE 0,0,0D,-8,0F,-4,0D,-3
	.BYTE 0,0,0,0,3,3,5,2		;67 DEGREES
	.BYTE 0,0,0D,-5,0E,-1,0C,-1
	.BYTE 0,0,-1,-2,0,2,2,1		;90 DEGREES
	.BYTE 0,0,0C,-2,0B,2,9,1
	.BYTE 0,0,-2,-5,-3,-1,-1,-1	;112 DEGREES
	.BYTE 0,0,0B,0,8,3,6,2
	.BYTE 0,0,-2,-8,-4,-4,-2,-3	;135 DEGREES
	.BYTE 0,0,8,2,4,4,3,2
	.BYTE 0,0,0,-0B,-3,-0B,-1,-9	;157 DEGREES
	.BYTE 0,0,2,1,-2,0,-1,-2
	.BYTE 0,0,2,-0C,-2,-0B,-1,-9	;180 DEGREES
	.BYTE 0,0,2,1,-2,0,-1,-2
	.BYTE 0,0,5,-0D,1,-0E,1,-0C	;202 DEGREES
	.BYTE 0,0,0,0,-3,-3,-2,-5
	.BYTE 0,0,8,-0D,4,-0F,3,-0D	;225 DEGREES
	.BYTE 0,0,-2,-3,-4,-7,-2,-8
	.BYTE 0,0,0B,-0B,8,-0E,6,-0D	;247 DEGREES
	.BYTE 0,0,-2,-6,-3,-0A,-1,-0A
	.BYTE 0,0,0C,-9,0B,-0D,9,-0C	;270 DEGREES
	.BYTE 0,0,-1,-9,0,-0D,2,-0C
	.BYTE 0,0,0D,-6,0E,-0A,0C,-0A	;292 DEGREES
	.BYTE 0,0,0,-0B,3,-0E,5,-0D
	.BYTE 0,0,0D,-3,0E,-7,0D,-8	;315 DEGREES
	.BYTE 0,0,3,-0D,7,-0F,8,-0D
	.BYTE 0,0,0B,0,0E,-3,0D,-5	;337 DEGREES
	.BYTE 0,0,6,-0D,0A,-0E,0A,-0C


	.SBTTL	MOVEP - MOVE PLAYER
MOVEP:	LDA PEXPLD
	BEQ 10$			;PLAYER IS NOT EXPLODING
5$:	JMP 55$

10$:	LDA DOOR
	BMI 5$			;IF PLAYER IS IN A DOOR
	JSR CHKPTS		;CHECK AGAINST CHECK POINTS
	LDX LEVEL
	LDA X,HDTYPE
	LSR
	BCC 15$			;NO GRAVITY IN THIS MAZE
	LDA FRAME
	AND I,01
	BNE 15$			;NOT THIS FRAME
	LDA PLAYA
	PHA
	LDA I,80
	STA PLAYA		;SET DIRECTION-DOWN
	LDA I,0FF
	STA TEMP1+1		;ALLOW ENTRY TO TURNSTILES
	LDA PLAY1H
	LDY PLAY1V
	JSR PLAYD		;GET VALID DIRECTIONS
	JSR PLAYC		;CHECK PLAYFIELD COLLISIONS
	JSR TURNS		;CHECK TURNSTILES
	LDA I,0C0
	STA TEMP1+1
	JSR MOVEP2		;MOVE PLAYER
	PLA
	STA PLAYA		;RESTORE ANGLE
15$:	LDA MODE
	BNE 5$			;IF IN ATTRACT
	LDX I,0
	BIT CKIND
	BPL 16$			;IF WE ARE NOT IN A COCKTAIL CABINET
	INX
16$:	LDA X,JOYS
	LDY X,JOYS+2
	JSR PLAYRA		;GET PLAYER ANGLE
	BCS 20$			;IF NO ANGLE CHANGE
	TAX			;NEW ANGLE
	LDA Y,PANGLE
	AND I,01
	BNE 20$			;IF PLAYER ANGLE CHANGE ONLY-NO MOVEMENT
	STX PLAYA
	LDA I,01
	JSR MOVEP1		;MOVE PLAYER
	LDX CHAN+10.
	BNE 18$			;IF SOUND IS ALREADY ON
	LDA I,7
	STA CHAN+10.		;SET SPEED OF SOUND
	LDX WALK
	INX
	CPX I,54.
	BCC 17$			;WRAP SOUND TABLE AROUND TO START.
	LDX I,0
17$:	LDA X,98$		;GET FREQUENCY
	STA AUDF0+4
	LDA I,0A5
	STA AUDC0+4		;SET VOLUME
	STX WALK		;RESET INDEX
	BNE 19$			;ALWAYS

18$:	CPX I,4
	BNE 19$			;IT IS NOT TIME TO TURN VOLUME OFF
	LDA I,0
	STA AUDC0+4		;TURN OFF VOLUME
19$:	LDA BMOVE1
	BIT CKIND
	BPL 22$			;IF NOT COCKTAIL
	LDA BMOVE2
22$:	STA PLYRB
	LSR
	BCS 30$			;LEAVE PLAYER DIRECTION ALONE
25$:	LDA PLAYA
	EOR I,80		;REVERSE DIRECTION FOR SHOOTING
	STA PLAYA
	JMP 30$

20$:	LDA BMOVE1
	BIT CKIND
	BPL 24$			;IF NOT COCKTAIL
	LDA BMOVE2
24$:	TAX
	EOR PLYRB
	STX PLYRB
	LSR
	BCS 25$			;CHANGE DIRECTION
30$:	LDA PLAYA
	JMP 47$

MOVEP0	=.
40$:	CLC
	ADC PLAYA
45$:	STA PLAYA		;NEW PLAYER ANGLE
47$:	LSR
	LSR
	LSR
	LSR			;ONE PICTURE EVERY 22 DEGREES (16 PICTURES)
	TAX
	LDA X,99$		;GET ONE PICTURE
	STA PLAY1P
	EOR I,10		;GET SECOND PICTURE
	STA PLAY2P
	JSR MOVEF		;MOVE PLAYERS FEET
55$:	LDX I,02
60$:	LDA X,PSHTM
	BNE 65$			;IF SHOT IS MOVING
	JSR INITPS		;REPOSITION THE NOSE
65$:	DEX
	BPL 60$
90$:	RTS

98$:	.BYTE 79,79,6C,79,6C,60,6C,60
	.BYTE 5B,60,6C,79,6C,60,6C,60
	.BYTE 5B,60,6C,79,6C,60,6C,60
	.BYTE 79,79,80,0A2,90,90,0A2,0A2
	.BYTE 0B6,0B6,0A2,0B6,90,80,90,80
	.BYTE 79,79,80,0A2,90,90,0A2,0A2
	.BYTE 0B6,0B6,0A2,0B6,90,80
99$:	.BYTE 0,1,2,3		;PLAYER PICTURES
	.BYTE 54,53,52,51
	.BYTE 0D0,0D1,0D2,0D3
	.BYTE 84,83,82,81

;
;ENTRY	(A)=DIRECTION FOR FEET
;	(PLAYA)=ANGLE TO MOVE
;	(TEMP1)=VALID DIRECTIONS
;USES	A,X,Y,TEMP1
;CALLS	PLAYC,SIN,COS
MOVEP1:	PHA
	LDA I,0FF
	STA TEMP1+1		;ALLOW ENTRY TO TURNSTILES
	LDA PLAY1H
	LDY PLAY1V
	JSR PLAYD		;CHECK FOR VALID PLAYER DIRECTIONS
	JSR PLAYC		;CHECK PLAY FIELD STAMPS
	JSR TURNS		;CHECK TURNSTILES AND MOVE THEM IF NEEDED
	PLA
	CLC
	ADC FEET
	TAX
	EOR FEET
	STX FEET		;NEW FEET POSITION
	AND I,1C
	BEQ MOVEP2		;NO CHANGE IN FEET POSITION
	TXA
	AND I,0C
	CMP I,08
	BNE 10$			;USE SOUND ON FOOT IN FORWARD POSITION
	LDA I,4
	STA CHAN+2		;PLAYER WALKING SOUND
10$:	LDA TEMP1+1
	PHA
	TXA
	AND I,1C
	LSR
	LSR
	TAX
	LDA I,40
	STA TEMP1+1		;SLOW WADDLE
	LDA PLAYA
	PHA
	CLC
	ADC X,WADDLE		;NEW ANGLE FOR DIRECTION OF WADDLE
	STA PLAYA
	JSR MOVEP2		;WADDLE PLAYER
	PLA
	STA PLAYA		;RESTORE PLAYER ANGLE
	LDA I,0FF
	STA TEMP1+1		;ALLOW PLAYER TO ENTER TURNSTILE
	LDA PLAY1H
	LDY PLAY1V
	JSR PLAYD		;GET VALID DIRECTIONS
	JSR PLAYC		;CHECK PLAYFIELD STAMPS
	PLA
	STA TEMP1+1

;
; ENTRY	(TEMP1+1)=NEGATIVE IF IN SLOW PLAYFIELD (DECREASE SPEED)
;		=D6 SET IF WADDLE OR FORWARD (2/3 SPEED)
;	(TEMP1)=VALID DIRECTIONS
;
MOVEP2:	LDA TEMP1
	AND I,0F
	BNE 1$			;PLAYER CAN MOVE IN SOME DIRECTION
	LDA I,0F
	STA TEMP1		;ALLOW ALL DIRECTIONS
1$:	LDA PLAYA
	AND I,0F0		;MOVE AS SHOWN BY PICTURE
	JSR COS			;COS ANGLE = CHANGE IN H
	LSR TEMP1
	BCC 2$			;WE CAN'T GO DOWN
	CPY I,0FF
	BNE 2$			;TRY OTHER DIRECTION
	LSR TEMP1
	BPL 5$			;MOVE DOWN

2$:	ROR TEMP1
	BCC 20$			;TRY VERTICAL DIRECTION
	CPY I,0
	BNE 20$			;WE ARE GOING IN WRONG DIRECTION
5$:	BIT TEMP1+1
	BVS 8$			;IF WADDLE OR FORWARD
	PHA
	CLC			;MAKE PLAYER VERY FAST
	ADC PLAYHL
	STA PLAYHL
	TYA
	ADC PLAY1H
	STA PLAY1H
	PLA
8$:	BIT TEMP1+1
	BMI 10$			;IF SLOW PLAYFIELD
	ASL
10$:	CLC
	ADC PLAYHL
	STA PLAYHL
	TYA
	ADC PLAY1H
	STA PLAY1H		;NEW PLAYERS HORIZONTAL
	CLC
	ADC I,08
	STA PLAY2H		;OTHER HALF OF PLAYER
20$:	LDA PLAYA
	AND I,0F0		;MOVE IN DIRECTION AS SHOWN BY PICTURE
	JSR SIN			;SIN ANGLE = CHANGE IN V
	ROR TEMP1
	BCC 22$			;WE CAN'T GO RIGHT
	CPY I,0FF
	BEQ 25$			;MOVE DOWN
22$:	ROR TEMP1
	BCC 40$			;WE CANT'T GO LEFT
	CPY I,0
	BNE 40$			;GOING IN WRONG DIRECTION
25$:	BIT TEMP1+1
	BVS 28$			;IF WADDLE OR FORWARD
	PHA
	CLC
	ADC PLAYVL		;SPEED PLAYER UP EVEN MORE
	STA PLAYVL
	TYA
	ADC PLAY1V
	STA PLAY1V
	PLA
28$:	BIT TEMP1+1
	BMI 30$			;IF SLOW PLAYFIELD
	ASL
30$:	CLC
	ADC PLAYVL
	STA PLAYVL
	TYA
	ADC PLAY1V
	STA PLAY1V		;NEW PLAYERS VERTICAL
	STA PLAY2V
40$:	RTS

WADDLE:	.BYTE 40,40,40,40	;CHANGE IN ANGLE FOR WADDLE.
	.BYTE 0C0,0C0,0C0,0C0


	.SBTTL	NEWDIR - NEW ALIEN DIRECTION
;
;ENTRY	(X)=CURRENT ALIEN INDEX
;EXIT	(A)=NEW DIRECTION
;	(ADELAY)=NEW DELAY BEFORE DIRECTION CHANGE
;USES	A,Y,TEMP1
NEWDIR:	LDA X,MOBJP
	AND I,3F
	CMP I,1F
	BEQ 2$			;IF A SHOT TIMED OUT OR JUST STARTING
	BCS 5$			;IF NOT A ROCK
	LDA X,MOBJA
	AND I,07
	TAY
	LDA Y,95$		;NEW DIRECTION
	JMP 40$

2$:	LDA X,MOBJA
	CMP I,40
	BCC 3$			;IF SHOT TIMED OUT
	AND I,3F		;IF SHOT JUST STARTING
	STA X,MOBJA
	LDA X,MOBJP
	BPL 4$			;LET THIS SHOT GO UNTIL IT HITS A WALL
	LDA I,7F
	STA X,ADELAY		;LIFE TIME OF THIS SHOT
	RTS

3$:	LDA I,0
	STA X,MOBJC		;DELETE SHOT
	STA X,MOBJV
4$:	RTS

5$:	CMP I,28
	BCC 9$			;NOT A BUZZ SAW
	CMP I,2C
	BCC 6$			;IF A TYPE 3 INVADER
	LDA I,3F		;GO TIL WE HIT A WALL
	STA X,ADELAY		;RESET DELAY
	LDA I,6			;TURN LEFT
	BNE 7$

6$:	LDA RND1
	AND I,04
	ORA I,02		;RIGHT OR LEFT TURN
7$:	CLC
	ADC X,MOBJA
	AND I,07		;NEW DIRECTION
	BPL 40$			;ALWAYS

9$:	LDA RND0
	ORA I,07		;AT LEAST 8 FRAMES
	AND I,1F		;MAX OF 1 SECOND
	STA X,ADELAY
	LDA RND0
	CMP I,0C0
	BCS 50$			;TIME FOR RANDOM DIRECTION
	LDA PLAY1H
	CLC
	ADC I,04		;REMEMBER PLAYER IS 2 MOTION OBJECTS
	SEC
	SBC X,MOBJH
	LDY I,0
	ROR			;EXTEND SIGN (CARRY) DOWN
	LSR
	LSR
	BEQ 10$			;ALIEN IS ON THE SAME HORIZONTAL
	INY			;Y=1
	CMP I,20
	BCC 10$			;IF PLAYER IS TO THE RIGHT OF THE ALIEN
	INY			;Y=2
10$:	STY TEMP1		;0,1,2 FOR CHANGE IN HORIZONTAL
	LDA PLAY1V
	SEC
	SBC X,MOBJV
	LDY I,0
	ROR			;EXTEND SIGN (CARRY) DOWN
	LSR
	LSR
	BEQ 20$			;IF OBJECTS ARE ON SAME VERTICAL
	INY			;Y=1
	CMP I,20
	BCC 20$			;PLAYER IS ABOVE ALIEN
	INY			;Y=2
20$:	LDA TEMP1
	ASL TEMP1		;CLEARS CARRY
	ADC TEMP1		;3*TEMP1-CARRY IS CLEAR
	STY TEMP1
	ADC TEMP1
	BEQ 50$			;PLAYER IS ON TOP OF ALIEN
	TAY
	DEY			;0 TO 7
	LDA RND1
	AND I,03
	BEQ 30$
	SEC
	SBC I,02		;0,-1 OR 1
30$:	CLC
	ADC Y,90$		;NEW DIRECTION
40$:	EOR X,MOBJA
	AND I,07
	EOR X,MOBJA		;USE OLD SPEED AND NEW DIRECTION
	AND I,3F		;CLEAR STUN BIT
	STA X,MOBJA
	RTS

50$:	LDA RND1		;RANDOM DIRECTION
	JMP 40$

90$:	.BYTE 4,0,6,5		;DIRECTION TO PLAYER
	.BYTE 7,2,3,1		;0=LEFT, 2=UP, ...
95$:	.BYTE 6,7,6,5,6,7,6,5	;NEW ROCK DIRECTION


TRAP1:	.BYTE 7F,0BF,0DF,3F	;MORSE CODE FOR "ENGINEERED BY DOUG SNYDER"
	.BYTE 0BF,7F,7F,5F	;0=DOT, 1=DASH
	.BYTE 7F,9F,8F,0B0	;FILL REST OF BYTE WITH OPPOSITE OF LAST VALUE
	.BYTE 9F,0E0,20,0DF
	.BYTE 1F,0BF,0B0,9F
	.BYTE 7F,5F
	.PAGE
	.SBTTL	OBSTAC - CALCULATE OBSTACLE ADDRESS
;
;	THIS ROUTINE DETERMINES THE PLAYFIELD ADDRESS
;	FROM MOTION OBJECT ADDRESS.
;
;ENTRY	(A)=MOTION OBJECT HORIZONTAL
;	(Y)=MOTION OBJECT VERTICAL
;EXIT	(Y)=0
;	(OBST,OBST+1)=PLAYFIELD ADDRESS
;	(CC)=ZERO IF SLOW PLAYFIELD OR BLANK OR A FRUIT
;USES	A,Y,(OBST,OBST+1),TEMP1
OBSTAC:	LSR
	LSR
	LSR
	STA OBST		;0 TO 1F
	LDA I,PLYFLD/400
	STA OBST+1
	STY TEMP1
	LDA I,0F0
	SEC
	SBC TEMP1
	AND I,0F8
	ASL
	ROL OBST+1
	ASL
	ROL OBST+1
	ORA OBST
	STA OBST
	LDY I,0
OBSTA1	=.
	LDA NY,OBST		;GET PLAYFIELD STAMP
	BEQ 20$			;IF BLANK
	CMP I,BLK
	BEQ 20$			;IF SLOW PLAYFIELD
	CMP I,STR
	BCS 15$			;IF A FRUIT
	CMP I,SCR+12.
	BCS 20$			;IF NOT A SCORE (ALWAYS NON-ZERO)
	CMP I,SCR
	BCC 20$			;NOT A SCORE
15$:	LDA I,0
20$:	RTS


	.SBTTL	PLAYC-PLAYER COLLISION WITH PLAYFIELD
;
;ENTRY	(TEMP2)=RELATIVE H OFFSET
;	(TEMP2+1)=RELATIVE V OFFSET
;	(OBST,OBST+1)=ADDRESS OF PLAYFIELD WINDOW
;EXIT	(TEMP1+1)=MINUS IF IN SLOW PLAYFIELD
;	(DOOR)=NEGATIVE IF PLAYER IS IN A DOOR
;	(TEMP2)=INDEX FOR LOWER LEFT CORNER OF PLAYFIELD WINDOW
;USES	A,X,Y, TEMP1+1,(TEMP2,TEMP2+1), (TEMP3,TEMP3+1), (TEMP4,TEMP4+1)
PLAYC:	LDY I,0
	STY TEMP1+1
	LDA TEMP2
	CMP I,04
	BCC 10$			;LOWER SET OF STAMPS
	INY			;USE UPPER SET OF STAMPS
10$:	LDA TEMP2+1
	CMP I,04
	BCC 20$			;LEFT SIDE STAMPS
	TYA
	CLC
	ADC I,20		;RIGHT SIDE STAMPS
	TAY
20$:	STY TEMP2		;SAVE INDEX
	JSR PLAYC1		;CHECK STAMP
	LDY TEMP2
	INY
	JSR PLAYC1		;CHECK STAMP
	LDA TEMP2
	CLC
	ADC I,20
	TAY
	PHA
	JSR PLAYC1		;CHECK STAMP
	PLA
	TAY
	INY
PLAYC1:	LDA NY,OBST		;GET PLAYFIELD STAMP
	CMP I,BLK
	BNE 10$			;NOT SLOW PLAYFIELD
	PHA
	LDA I,80		;SET SLOW PLAYFIELD FLAG
	ORA TEMP1+1
	STA TEMP1+1
	PLA
10$:	CMP I,STR
	BCC 20$			;NOT A FRUIT
	CMP I,STR+6
	BCS 20$			;NOT A FRUIT
	LDA TEMP1
	PHA
	JSR GOTFRT		;WE GOT A FRUIT
	PLA
	STA TEMP1		;RESTORE VALID DIRECTIONS
	RTS

20$:	LDA DOOR
	BMI 30$			;IF WE JUST ENTERED DOOR
	LDY I,03
	LDA PLAY1H
	CMP I,10
	BCC 25$			;WE ENTERED A DOOR
	DEY
	CMP I,0E1
	BCS 25$			;WE ENTERED A DOOR
	LDY I,0
	LDA PLAY1V
	CMP I,0F1
	BCS 25$			;WE ENTERED A DOOR
	INY
	CMP I,10
	BCS 30$			;WE ARE IN THE PLAYFIELD
25$:	LDA I,80
	STA DOOR		;SET TIMER
	LDA I,24.
	STA CHAN+15.		;TURN ON SOUND
	STY TEMP2+1
	LDA LEVEL
	STA LLEVEL		;LAST MAZE NUMBER
	ASL
	ASL			;CLEARS CARRY
	ORA TEMP2+1
	TAY
	LDA Y,MAP
	CMP I,7F
	BCS 35$			;IF A MYSTERY DOOR OR NO DOOR AT ALL
	TAX
	LDA X,LEVELC
	BMI 27$			;IF A RED DOOR
	LDX PLAYR
	LDA X,ALLMZS		;DECREASE COUNT OF MAZES LEFT
	SED
	SEC
	SBC I,01
	CLD
	STA X,ALLMZS
27$:	LDX LEVEL
	INC X,LEVELC		;INCREASE DIFFICULTY FOR NEXT TIME THRU HERE
	LDA X,LEVELC
	ORA I,80
	STA X,LEVELC		;NO GREEN DOOR TO THIS MAZE AGAIN
30$:	RTS

35$:	LDA I,7F		;FLAG TO START PLAYER IN THE MIDDLE
	STA LLEVEL
	INC SBONUS+7		;BONUS FOR MYSTERY DOOR
	BNE 27$			;ALWAYS


	.SBTTL	PLAYD-FIND ALL VALID PLAYER DIRECTIONS
;
;	THIS ROUTINE ASSUMES THE PLAYER IS 16X16
;
;ENTRY	(A)=CURRENT H POSITION
;	(Y)=CURRENT V POSITION
;	(TEMP1+1)=MASK FOR DETERMINING WALLS
;EXIT	(TEMP1)=VALID DIRECTIONS D3=LEFT,D2=RIGHT,D1=UP,D0=DOWN(1=VALID)
;	(OBST,OBST+1)=ADDRESS OF LOWER LEFT CORNER OF PLAYFIELD WINDOW
;	(TEMP2)=RELATIVE H OFFSET
;	(TEMP2+1)=RELATIVE V OFFSET
;USES	A,Y,TEMP1, (TEMP2,TEMP2+1)
PLAYD:	PHA
	AND I,07
	STA TEMP2		;RELATIVE H OFFSET IN WINDOW
	STY TEMP2+1
	LDA I,0F8
	SEC
	SBC TEMP2+1
	AND I,07
	STA TEMP2+1		;RELATIVE V OFFSET IN WINDOW
	PLA
	JSR OBSTAC		;GET ADDRESS OF PLAYFIELD WINDOW
	LDA TEMP2+1
	CMP I,06
	BCS 10$			;WE CAN ALWAYS GO LEFT
	LDY I,0
	JSR PLAYD1		;CHECK LEFT SIDE PLAYFIELD
10$:	ROL TEMP1		;SET LEFT SIDE BIT
	LDA I,02
	CMP TEMP2+1
	BCS 20$			;IF IT IS CLEAR TO THE RIGHT
	LDY I,40
	JSR PLAYD1		;CHECK RIGHT HAND SIDE
20$:	ROL TEMP1		;SET RIGHT SIDE BIT
	LDA I,02
	CMP TEMP2
	BCS 30$			;WE CAN ALWAYS GO UP
	LDY I,02
	JSR PLAYD3		;TRY LOOKING UP
30$:	ROL TEMP1		;SET UP DIRECTION BIT
	LDA TEMP2
	CMP I,06
	BCS 40$			;WE CAN ALWAYS GO DOWN
	LDY I,0
	JSR PLAYD3		;TRY LOOKING DOWN
40$:	ROL TEMP1
	RTS

;ENTRY	(Y)=BASE INDEX INTO PLAYFIELD WINDOW
;	(TEMP1+1)=MASK FOR PLAYFIELD STAMP
;	(TEMP2)=RELATIVE H OFFSET IN WINDOW
;	(OBST,OBST+1)=ADDRESS OF PLAYFIELD WINDOW
;EXIT	(CC)=CARRY SET IF DIRECTION IS EMPTY
;USES	A,Y
PLAYD1:	LDA TEMP2
	CMP I,04
	BCC 10$			;IF LOWER TWO STAMPS OF WINDOW
	INY
10$:	LDA NY,OBST
	INY
PLAYD2:	JSR PLAYD4		;CHECK PLAYFIELD
	BCC 30$			;WE HIT AN EDGE
	LDA NY,OBST
PLAYD4	=.
	AND TEMP1+1
	CMP I,BLK
	BEQ 25$			;IF IN MUD
	CMP I,HTURN
	BCC 20$			;NO EDGE
	CMP I,HTURN+2
	BCC 25$			;IF A TURNSTILE
	CMP I,60
	BCC 30$			;WE HIT AN EDGE
	CMP I,CNTR
	BEQ 30$			;NOBODY ENTERS A TURNSTILE CENTER
	CMP I,80+EDGE
	BCC 20$			;NOT A DOOR
	CMP I,NDOOR
	BCC 30$			;IF NOT IN A DOOR
20$:	SEC			;VALID DIRECTION
	RTS

25$:	BIT TEMP1+1
	BMI 20$			;PLAYER CAN GO THRU MUD OR TURNSTILE
30$:	CLC			;INVLAID DIRECTION
	RTS

;ENTRY	(Y)=BASE INDEX INTO PLAYFIELD WINDOW
;	(TEMP1+1)=MASK FOR PLAYFIELD STAMP
;	(TEMP2+1)=RELATIVE V OFFSET IN WINDOW
;	(OBST,OBST+1)=ADDRESS OF PLAYFIELD WINDOW
;EXIT	(CC)=COPY SET IF DIRECTION IS EMPTY
;USES	A,Y
PLAYD3:	LDA TEMP2+1
	CMP I,04
	BCC 10$			;IF ON LEFT SIDE
	TYA
	CLC
	ADC I,20
	TAY
10$:	LDA NY,OBST
	PHA
	TYA
	CLC
	ADC I,20
	TAY
	PLA
	JMP PLAYD2		;DETERMINE IF OBJECTS ARE IN THE WAY


	.SBTTL	PLAYRA - GET PLAYERS ANGLE FROM JOYSTICKS
;
;ENTRY	(A)=UP/DOWN JOYSTICK INDEX
;	(Y)=LEFT/RIGHT JOYSTICK INDEX
;EXIT	(CC)=CARRY SET IF NO CHANGE
;	(A)=NEW ANGLE IF CARRY CLEAR
;	(Y)=INDEX INTO PLAYER ANGLE
PLAYRA:	CPY I,08
	BCC PLAYR1		;IF ON LEFT HALF OF SCREEN
	PHA
	TYA
	EOR I,0F		;RESULT (H,V)=-RESULT (H,15-V)
	TAY
	PLA
	JSR PLAYR1		;GET ANGLE
	BCS 10$			;NO CHANGE IN ANGLE
	JSR COMP		;COMPLEMENT RESULT
	CLC
10$:	RTS

PLAYR1:	CMP I,08
	BCC PLAYR2		;IF ON LOWER PORTION OF SCREEN
	EOR I,0F
	JSR PLAYR2		;RESULT (H,V)=80-RESULT (15-H,V)
	BCS 10$			;NO CHANGE IN ANGLE
	JSR COMP		;COMPLEMENT RESULT
	CLC
	ADC I,80
	CLC
10$:	RTS

PLAYR2:	STY TEMP1
	ASL
	ASL
	ASL
	ORA TEMP1
	TAY
	LDA Y,PANGLE		;GET PLAYER ANGLE
	AND I,0F0		;IGNORE LOWER BITS
	ASL
	RTS

PANGLE:	.BYTE 30,30,30,30,40,40,40,40	;PLAYER ANGLE / 2
	.BYTE 30,30,30,30,40,40,40,40	;MINUS IF NO CHANGE IN DIRECTION
	.BYTE 30,30,30,30,30,40,40,40
	.BYTE 30,30,30,31,31,41,41,41
	.BYTE 20,20,30,31,31,31,41,41
	.BYTE 20,20,20,21,31,80,80,80
	.BYTE 20,20,20,21,21,80,80,80
	.BYTE 20,20,20,21,21,80,80,80


	.SBTTL	PSHOTC - PLAYERS SHOT COLLISION WITH THE ALIENS
PSHOTC:	LDX I,02
10$:	LDA X,PSHTM
	BEQ 40$			;NO ACTIVE SHOT
	LDY I,NALIEN-1
20$:	LDA Y,MOBJC
	BEQ 30$			;NO ACTIVE ALIEN
	LDA Y,MOBJA
	BMI 30$			;FLASHING ALIEN
	LDA Y,MOBJP
	AND I,3F
	CMP I,1F
	BEQ 30$			;NO COLLISIONS WITH ALIEN SHOTS
	LDA X,PSHTH
	SEC
	SBC I,01		;REMEMBER THE SHOT IS IN THE LOWER LEFT CORNER
	SEC
	SBC Y,MOBJH
	CMP I,13.		;ALIENS ARE 14 HIGH
	BCS 30$			;NO COLLISION
	STA TEMP1
	LDA Y,MOBJV
	SEC
	SBC X,PSHTV
	SEC
	SBC I,1			;SHOT IS NOT CENTERED IN THE PICTURE
	CMP I,13.		;ALIENS ARE 14 WIDE
	BCC 50$			;A COLLISION
30$:	DEY
	BPL 20$			;CHECK OTHER ALIENS
40$:	DEX
	BPL 10$			;CHECK OTHER SHOTS
	RTS

50$:	LDA Y,MOBJP
	AND I,3F
	CMP I,1F
	BCS 55$			;IF NOT A ROCK
	LDA Y,MOBJA
	AND I,07		;GET ROCK DIRECTION
	STY TEMP1+1		;SAVE Y
	TAY
	LDA X,PSHTA
	SEC
	SBC Y,93$		;COMPARE THE DIRECTIONS
	JSR ABS			;GET POSITIVE DIFFERENCE
	CMP I,50
	BCC 53$			;SHOT WILL HAVE NO EFFECT ON DIRECTION
	LDA X,PSHTA
	CMP I,0F0
	BCS 51$			;IF SHOT IS GOING UP
	CMP I,20
	BCC 51$			;IF SHOT IS GOING UP
	LDA Y,95$
	BPL 54$			;ALWAYS

51$:	LDA Y,96$
54$:	LDY TEMP1+1		;RESTORE Y
	EOR Y,MOBJA
	AND I,7
	EOR Y,MOBJA		;ADD IN NEW DIRECTION
	STA Y,MOBJA
	AND I,07
	CMP I,05
	BCS 53$			;ALL DOWNWARD DIRECTION CHANGES UP WILL REMAIN IN EFFECT
	LDA I,5
	STA Y,ADELAY		;STOP ROCK MOMENTARILY
53$:	LDY I,0
	STY X,PSHTM		;CLEAR SHOT
	STX TEMP2
	LDA I,5
	JSR SCORE		;ADD POINTS FOR COCONUT
	LDY TEMP1+1
	LDX TEMP2		;RESTORE REGISTERS
	JMP 40$

55$:	STX TEMP1
	CMP I,28
	BCC 60$			;WE DON'T STUN THESE ALIENS
	CMP I,2C
	BCS 60$			;WE DON'T STUN THESE ALIENS
	LDA I,0
	STA X,PSHTM		;REMOVE PLAYERS SHOT
	LDA Y,MOBJA
	ORA I,40
	STA Y,MOBJA		;SET STUN BIT
	LDA I,20
	STA Y,ADELAY		;DELAY TIME
	LDA I,15.
	STA CHAN+9		;SET HIT SOUND
	BNE 65$			;ALWAYS

60$:	INC SBONUS+1		;COUNT HITS
	LDA I,0
	STA X,PSHTM		;CLEAR SHOT
	STA Y,MOBJC		;CLEAR OBJECT
	STA Y,MOBJV
	TYA
	AND I,01		;0 FOR LEFT 1 FOR RIGHT SIDE
	TAX
	DEC X,ALIENS		;REDUCE ALIEN COUNT
	LDA I,15.
	STA CHAN+9		;EXPLOSION SOUND
65$:	LDA Y,MOBJP
	LSR
	AND I,06		;GET TYPE OF ALIEN (0,1,2)
	TAX
	LDY X,90$+1
	LDA X,90$
	JSR SCORE		;SCORE POINTS
	LDX TEMP1
	JMP 40$			;ALWAYS

90$:	.WORD 200		;POINT TABLE DEPENDENT ON ALIEN
	.WORD 300
	.WORD 10
	.WORD 100		;RING INVADER
93$:	.BYTE 40,20,0,0E0
	.BYTE 0C0,0A0,80,60	;CONVERSION TO ANGLE
95$:	.BYTE 6,6,6,6,6,7,2,5	;NEW ROCK DIRECTION
96$:	.BYTE 6,6,6,6,6,3,2,1	;NEW ROCK DIRECTIONS


	.SBTTL	PSHOTS - SHOOT PLAYER SHOTS
PSHOTS:	LDA PEXPLD
	BNE 2$			;DO NOT MOVE SHOTS IF PLAYER IS EXPLODING
	LDA DOOR
	BMI 40$			;PLAYER IS IN A DOOR
	LDA MODE
	BPL 10$			;IF IN PLAY MODE
	LDA FRAME
	AND I,07
	BNE 40$			;SPACE SHOTS OUT
	LDA RND1
	AND I,01
	BEQ 20$			;TIME TO SHOOT
	BNE 40$			;JUST UPDATE SHOT POSITIONS

2$:	RTS

10$:	LDA FIRE1
	BIT CKIND
	BPL 12$			;IF NOT COCKTAIL
	LDA FIRE2
12$:	LSR
	LSR
	LSR
	ROL STTMP0		;DEBOUNCE SWITCH
	LDA STTMP0
	AND I,07
	CMP I,06
	BNE 40$			;PLAYER DID NOT JUST PRESS FIRE BUTTON
20$:	LDX I,02
25$:	LDA X,PSHTM
	BEQ 30$			;WE FOUND A SLOT
	DEX
	BPL 25$			;KEEP LOOKING
	BMI 40$			;NO FREE SLOTS

30$:	LDA I,12.
	STA CHAN		;SHOT SOUND
	STA SBONUS		;CLEAR THIS SECRET BONUS
	STA X,PSHTM		;FLAG SHOT AS MOVING
	LDA PLAYA
	AND I,0F0		;SAME ANGLE AS PICTURE
	STA X,PSHTA		;SET ANGLE
40$:	RTS


	.SBTTL	SHOTS - MOVE PLAYER SHOTS
SHOTS:	LDX I,02
45$:	LDA X,PSHTM
	BEQ 60$			;SHOT IS NOT ALIVE
	LDY X,PSHTV
	LDA X,PSHTH
	JSR OBSTAC		;CHECK FOR OBSTACLE
	BEQ 50$			;NO OBSTACLE
	LDA I,0
	STA SBONUS+1		;FLAG NO SECRET BONUS
	STA X,PSHTM
	BEQ 60$			;ALWAYS

50$:	LDA X,PSHTA
	STX TEMP1
	JSR COS			;COS ANGLE = CHANGE IN H
	LDX TEMP1
	STY TEMP1+1
	ASL			;TWICE AS FAST AS SHIP
	PHA
	JSR SHOTS1		;MOVE HORIZ
	PLA
	ASL
	ROL TEMP1+1
	JSR SHOTS1		;MOVE HORIZ
	LDA X,PSHTA
	JSR SIN			;SIN ANGLE = CHANGE IN V
	STY TEMP1+1
	LDX TEMP1
	ASL			;TWICE AS FAST AS SHIP
	PHA
	JSR SHOTS2		;MOVE VERTICAL
	PLA
	ASL
	ROL TEMP1+1
	JSR SHOTS2		;MOVE VERTICAL
60$:	DEX
	BPL 45$			;TRY ALL SHOTS
	RTS
SHOTS1:	CLC
	ADC X,PSHTHL
	STA X,PSHTHL
	LDA TEMP1+1
	ADC X,PSHTH
	STA X,PSHTH		;NEW H POSITION
	RTS
SHOTS2:	CLC
	ADC X,PSHTVL
	STA X,PSHTVL
	LDA TEMP1+1
	ADC X,PSHTV
	STA X,PSHTV
	RTS

	.REPT 8-.&07		;ALLIGN ON 8 BYTE BOUNDARY
	.BYTE 0
	.ENDR
	.INCLUD MVCPY		;ALLOW A HOLE FOR LATER USE AND
	.INCLUD MVCPY		;COPYRIGHT PROTECTION
	.INCLUD MVCPY

CKSUM1:	.BYTE 07A		;CHECKSUM FOR SECOND 4K BLOCK
	.SBTTL	MAZE MAP AND DESCRIPTIONS OF MAZES

	.MACRO CON L,R,U,D
	.BYTE L-1,R-1,U-1,D-1
	.ENDM

MAP:	CON -1,2,31.,-1		;WHICH ROOM IS TO THE LEFT, RIGHT, UP AND DOWN
	CON 1,3,4,32.		;MINUS MEANS NO CONNECTION
	CON 2,4,-1,7		;NUMBERING STARTS AT 1
	CON 3,8,2,5		;80 IS A MYSTERY DOOR
	CON 6,-1,4,8
	CON -1,5,-1,7
	CON 26.,6,3,11.
	CON 10.,4,5,9.		;MAZE 8
	CON 10.,13.,8,11.
	CON -1,9,8,11.
	CON 7,9,10.,14.
	CON 14.,-1,80,13.	;MAZE 12
	CON -1,9,12.,14.
	CON 15.,12.,11.,13.
	CON -1,14.,17.,16.
	CON 17.,-1,-1,15.	;MAZE 16
	CON 18.,16.,15.,19.
	CON 19.,17.,22.,-1
	CON 20.,18.,22.,17.
	CON 21.,22.,24.,19.	;MAZE 20
	CON 20.,-1,24.,-1
	CON 20.,18.,23.,19.
	CON 25.,26.,27.,22.
	CON 25.,20.,80,21.	;MAZE 24
	CON 24.,23.,28.,80
	CON -1,7,27.,23.
	CON 23.,30.,29.,26.
	CON 29.,-1,-1,25.	;MAZE 28
	CON 28.,-1,30.,27.
	CON -1,31.,29.,27.
	CON 30.,32.,1,-1
	CON 31.,-1,-1,2		;MAZE 32
IBONUS:	.BYTE 19,20,20,19	;INITIAL VALUES FOR BONUS TIMER
	.BYTE 20,22,20,20
	.BYTE 23,20,19,20
	.BYTE 20,24,20,20
	.BYTE 20,19,20,20
	.BYTE 20,20,21,20
	.BYTE 21,20,19,19
	.BYTE 20,20,22,21
HDCNT:	.BYTE 0,10,0,0		;NUMBER OF HEADS/TAILS IN EACH LEVEL
	.BYTE 0,0,0,10
	.BYTE 10,0,0A,0
	.BYTE 8,10,10,8
	.BYTE 0,0A,0A,0
	.BYTE 0,0,0,0
	.BYTE 0A,0,0A,0
	.BYTE 0,10,10,0
HDTYPE:	.BYTE 1,41,0,0		;D6=D7=0 FOR CIRCULAR MAZES
	.BYTE 0,0,1,80		;D6=1 FOR VERTICAL
	.BYTE 0C0,0,0C0,2	;D7=1 FOR HORIZONTAL
	.BYTE 0,40,80,0		;D6=D7=1 FOR BOTH
	.BYTE 0,0,0,0		;D2=1 FOR AUTO TURNSTILES
	.BYTE 4,0,0,0		;D1=1 FOR CONNECTED TURNSTILES
	.BYTE 0C0,0,0,0		;D0=1 FOR GRAVITY
	.BYTE 0,40,80,0
ALTYP:	.BYTE 0,0,16.,16.,16.,16.,16.,16.
	.BYTE 16.,16.,0,0,16.,16.,4,4		;0=90 DEGREE SHOOTER
	.BYTE 16.,16.,16.,16.,16.,4,4,16.	;4=45 DEGREE SHOOTER
	.BYTE 16.,16.,16.,4,16.,4,16.,4		;8=BUZZ SAW
	.BYTE 16.,16.,12.,12.,8,8,4,4		;12=RING ALIEN
	.BYTE 16.,16.,16.,16.,0,0,4,4		;16=COCONUT
	.BYTE 16.,16.,16.,0,0,16.,0,0
	.BYTE 16.,16.,12.,12.,8,8,4,4		;MAZE 8
	.BYTE 12.,12.,0,0,0,0,4,4
	.BYTE 12.,12.,12.,12.,4,8,4,8
	.BYTE 12.,12.,12.,4,8,8,4,12.
	.BYTE 12.,12.,8,12.,12.,8,0,0
	.BYTE 12.,12.,12.,8,0,0,4,4
	.BYTE 12.,12.,0,0,12.,4,12.,4
	.BYTE 12.,12.,8,8,8,8,4,4
	.BYTE 12.,8,12.,8,0,0,12.,4		;MAZE 16
	.BYTE 8,8,12.,12.,8,12.,8,12.
	.BYTE 8,8,8,8,0,0,4,4
	.BYTE 8,8,0,0,8,8,4,4
	.BYTE 8,8,8,8,8,4,8,4
	.BYTE 8,12.,8,12.,4,4,8,8
	.BYTE 8,8,4,4,8,8,0,0
	.BYTE 12.,12.,12.,0,0,12.,0,0
	.BYTE 8,8,0,0,8,8,4,4			;MAZE 24
	.BYTE 0,0,8,8,0,4,16.,4
	.BYTE 0,0,0,0,12.,12.,4,4
	.BYTE 0,0,8,8,0,0,4,4
	.BYTE 0,0,0,0,0,0,4,4
	.BYTE 0,0,0,0,0,0,4,4
	.BYTE 0,0,8,8,12.,12.,4,4
	.BYTE 0,0,12.,12.,8,8,4,4
	.BYTE 0,16.,0,16.,0,16.,0,4		;MAZE 32
ALCNT:	.BYTE 2,1,1,2		;NUMBER OF ALIENS OF ALL TYPES TO START WITH
	.BYTE 1,2,4,4
	.BYTE 4,4,4,4
	.BYTE 4,4,1,4
	.BYTE 4,1,4,3
	.BYTE 3,4,4,4
	.BYTE 4,4,4,4
	.BYTE 4,4,1,3
ALMIN:	.BYTE 6,3,3,3		;MINIMUM NUMBER OF ALIENS
	.BYTE 3,3,3,3		;BEFORE SPEEDING UP THE REMAINDER
	.BYTE 3,3,3,3
	.BYTE 3,3,3,3
	.BYTE 3,3,3,3
	.BYTE 3,3,3,3
	.BYTE 3,3,3,3
	.BYTE 3,3,3,3


LEVS:	.WORD ZERO		;POINTER TO STATIC PLAYFIELDS STAMP
	.WORD ZERO
	.WORD LEV3
	.WORD LEV1
	.WORD LEV9
	.WORD LEV11
	.WORD LEV10
	.WORD ZERO
	.WORD ZERO
	.WORD LEV1
	.WORD ZERO
	.WORD LEV8
	.WORD ZERO
	.WORD LEV6
	.WORD ZERO
	.WORD LEV2

	.WORD LEV13		;MAZE 17
	.WORD ZERO
	.WORD LEV4
	.WORD LEV7
	.WORD LEV12
	.WORD LEV15
	.WORD LEV14
	.WORD LEV8
	.WORD ZERO
	.WORD LEV1
	.WORD ZERO
	.WORD ZERO
	.WORD LEV3A
	.WORD ZERO
	.WORD ZERO
	.WORD LEV16


	.MACRO DIR INC,STMP
	.BYTE 80,INC,STMP
	.ENDM

	.MACRO SEG CNT,ADD
	.BYTE CNT
	.WORD PLYFLD+ADD
	.ENDM



LEV1:	DIR 1,VER
	SEG 16.,65
	SEG 4,77
	SEG 3,0C3
	SEG 6,0C8
	SEG 7,0D0
	SEG 4,0D9
	SEG 4,125
	SEG 6,12C
	SEG 5,134
	SEG 2,13B
	SEG 3,1A3
	SEG 4,1A8
	SEG 7,1AE
	SEG 4,1B7
	SEG 2,223
	SEG 7,227
	SEG 4,231
	SEG 2,237
	SEG 2,23B
	SEG 5,283
	SEG 8,28A
	SEG 9,294
	SEG 9,2E6
	SEG 4,2F2
	SEG 3,2F8
	SEG 7,343
	SEG 5,34D
	SEG 6,354
	.BYTE 0

LEV2:	DIR 20,HOR
	SEG 2,28
	SEG 2,37
	SEG 2,8B
	SEG 2,94
	SEG 2,0EE
	SEG 2,2B1
	SEG 2,30B
	SEG 2,314
	SEG 2,368
	SEG 2,377
	DIR 1,VER
	SEG 2,126
	SEG 2,138
	SEG 2,195
	SEG 2,229
	SEG 2,286
	SEG 2,298
	.BYTE 0			;END OF LIST

LEV3:	DIR 20,HOR
	SEG 5,25
	SEG 5,125
	SEG 5,245
	SEG 3,345
	SEG 3,208
	SEG 6,6B
	SEG 8,1EB
	SEG 4,32B
	SEG 5,10E
	SEG 2,1EE
	SEG 2,36E
	SEG 5,191
	SEG 3,311
	SEG 5,34
	SEG 6,114
	SEG 5,214
	SEG 9,77
	SEG 3,1F7
	SEG 6,1FA
	SEG 6,2FA
LEV3A:	DIR 20,HOR
	SEG 3,28
	SEG 6,0E8
	SEG 5,2C8
	SEG 5,2E
	SEG 5,28E
	SEG 7,71
	SEG 2,271
	SEG 5,314
	SEG 7,297
	SEG 5,3A
	SEG 4,11A
	.BYTE 0

LEV4:	DIR 20,HOR
	SEG 7,70
	SEG 7,290
	DIR 1,VER
	SEG 7,1C5
	SEG 7,1D4
	.BYTE 0			;END OF LIST


LEV5:	DIR 20,BLK
	SEG 11.,0E9
	SEG 11.,0F6
	DIR 1,BLK
	SEG 4,0EA
	SEG 4,0F2
	SEG 14.,2C9
ZERO:	.BYTE 0			;END OF LIST

LEV6:	DIR 20,HOR
	SEG 2,2E
	SEG 2,97
	SEG 2,0E8
	SEG 2,154
	SEG 4,1B7
	SEG 2,24B
	SEG 2,2AE
	SEG 2,308
	SEG 2,374
	.BYTE 0

LEV7:	DIR 20,HOR
	SEG 2,28
	SEG 2,34
	SEG 2,3A
	SEG 2,8E
	SEG 5,97
	SEG 2,0E8
	SEG 2,0F1
	SEG 2,145
	SEG 2,15A
	SEG 5,18B
	SEG 2,194
	SEG 2,1E5
	SEG 2,1F1
	SEG 2,1FA
	SEG 5,248
	SEG 2,254
	SEG 2,2BA
	SEG 2,30B
	SEG 2,314
	SEG 2,365
	SEG 2,36E
	SEG 2,377
	DIR 1,VER
	SEG 2,63
	SEG 3,0C6
	SEG 3,0CC
	SEG 2,0D5
	SEG 2,0DB
	SEG 3,12F
	SEG 2,283
	SEG 2,289
	SEG 2,28F
	SEG 9,294
	SEG 3,2F2
	SEG 2,35B
	.BYTE 0			;END OF LIST

LEV8:	DIR 1,VTURN		;TURNSTILES-VERTICAL
	SEG 2,75
	SEG 2,78
	SEG 2,0C6
	SEG 2,0C9
	SEG 2,195
	SEG 2,198
	SEG 2,2E6
	SEG 2,2E9
	SEG 2,2F5
	SEG 2,2F8
	DIR 20,HTURN		;TURNSTILES-HORIZONTAL
	SEG 2,8E
	SEG 2,0EE
	SEG 2,94
	SEG 2,0F4
	SEG 2,1E8
	SEG 2,248
	SEG 2,1EE
	SEG 2,24E
	SEG 2,1F4
	SEG 2,254
	SEG 2,2B1
	SEG 2,311
	DIR 1,CNTR		;CENTER OF TURNSTILES
	SEG 1,77
	SEG 1,0C8
	SEG 1,0CE
	SEG 1,0D4
	SEG 1,197
	SEG 1,228
	SEG 1,22E
	SEG 1,234
	SEG 1,2E8
	SEG 1,2F1
	SEG 1,2F7
	DIR 20,HOR		;STATIC MAZE
	SEG 3,2B
	SEG 2,31
	SEG 4,0D7
	SEG 3,148
	SEG 8,151
	SEG 3,1F7
	SEG 3,348
	DIR 1,VER
	SEG 3,0D8
	SEG 5,126
	SEG 8,12D
	SEG 3,238
	SEG 7,288
	SEG 7,34B
	.BYTE 0			;END OF LIST


LEV9:	DIR 20,HOR		;HORIZONTAL SEGMENTS
	SEG 7,7A
	SEG 9,19A
	SEG 4,2FA
	SEG 9,137
	SEG 4,297
	SEG 7,74
	SEG 6,1F4
	SEG 4,2F4
	SEG 7,71
	SEG 6,191
	SEG 4,291
	SEG 3,351
	SEG 4,6E
	SEG 3,14E
	SEG 4,22B
	SEG 3,28
	SEG 5,0C8
	SEG 4,1C8
	SEG 3,348
	SEG 10.,65
	SEG 10.,225
	DIR 1,VER		;VERTICAL SEGMENTS
	SEG 2,72
	SEG 2,0C6
	SEG 4,12B
	SEG 3,1C9
	SEG 3,22E
	SEG 2,292
	SEG 4,2E8
	SEG 4,34B
	DIR 1,VTURN		;VERTICAL TURNSTILES
	SEG 2,192
	SEG 2,195
	SEG 2,286
	SEG 2,289
	SEG 2,355
	SEG 2,358
	DIR 20,HTURN		;HORIZONTAL TURNSTILES
	SEG 2,8B
	SEG 2,0EB
	SEG 2,97
	SEG 2,0F7
	SEG 2,2AE
	SEG 2,30E
	DIR 1,CNTR		;CENTERS OF TURNSTILES
	SEG 1,0CB
	SEG 1,0D7
	SEG 1,194
	SEG 1,288
	SEG 1,2EE
	SEG 1,357
	.BYTE 0


LEV10:	DIR 20,BLK
	SEG 1,3A
	SEG 3,0BA
	SEG 3,17A
	SEG 2,23A
	SEG 3,2DA
	SEG 1,39A
	SEG 1,1F7
	DIR 1,VER
	SEG 9,65
	SEG 7,71
	SEG 5,0C3
	SEG 11.,0CC
	SEG 10.,126
	SEG 5,133
	SEG 7,183
	SEG 6,18D
	SEG 2,196
	SEG 6,223
	SEG 4,22C
	SEG 2,233
	SEG 7,286
	SEG 8,290
	SEG 2,2E3
	SEG 3,2E8
	SEG 4,2EE
	SEG 2,2F5
	SEG 5,343
	SEG 6,34B
	SEG 4,354
	.BYTE 0


LEV11:	DIR 1,VER
	SEG 9,63
	SEG 7,74
	SEG 9,0C3
	SEG 9,0D4
	SEG 9,123
	SEG 7,134
	SEG 9,183
	SEG 9,194
	SEG 10.,22B
	SEG 10.,28B
	SEG 10.,2EB
	SEG 10.,34B
	DIR 20,HOR
	SEG 2,1A8
	SEG 12.,228
	SEG 14.,1A5
	SEG 1,6E
	SEG 1,12E
	SEG 1,31
	SEG 3,0B1
	SEG 3,171
	SEG 1,297
	SEG 1,2F7
	SEG 1,357
	SEG 3,21A
	SEG 3,2DA
	SEG 1,39A
	.BYTE 0


LEV12:	DIR 20,HOR
	SEG 3,25
	SEG 3,28
	SEG 9,2B
	SEG 3,31
	SEG 3,128
	SEG 5,137
	SEG 4,28E
	SEG 6,2EB
	DIR 1,VER
	SEG 9,0D1
	SEG 4,297
	DIR 1,CNTR		;TURNSTILE CENTERS
	SEG 1,74
	SEG 1,7A
	SEG 1,0C8
	SEG 1,0CE
	SEG 1,134
	SEG 1,13A
	SEG 1,185
	SEG 1,18E
	SEG 1,225
	SEG 1,228
	SEG 1,22E
	SEG 1,234
	SEG 1,23A
	SEG 1,28B
	SEG 1,291
	SEG 1,2E5
	SEG 1,2F4
	SEG 1,2FA
	SEG 1,345
	SEG 1,34E
	SEG 1,357
	DIR 20,HTURN
	SEG 2,34
	SEG 2,94
	SEG 2,88
	SEG 2,0E8
	SEG 2,8E
	SEG 2,0EE
	SEG 2,0FA
	SEG 2,15A
	SEG 2,145
	SEG 2,1A5
	SEG 2,1E5
	SEG 2,245
	SEG 2,1E8
	SEG 2,248
	SEG 2,1FA
	SEG 2,25A
	SEG 2,24B
	SEG 2,2AB
	SEG 2,251
	SEG 2,2B1
	SEG 2,2B4
	SEG 2,314
	DIR 1,VTURN
	SEG 2,78
	SEG 2,7B
	SEG 2,132
	SEG 2,135
	SEG 2,18C
	SEG 2,18F
	SEG 2,22C
	SEG 2,22F
	SEG 2,232
	SEG 2,235
	SEG 2,2E3
	SEG 2,2E6
	SEG 2,2F8
	SEG 2,2FB
	SEG 2,343
	SEG 2,346
	SEG 2,34C
	SEG 2,34F
	SEG 2,355
	SEG 2,358
	.BYTE 0


LEV13:	DIR 20,BLK
	SEG 2,188
	SEG 2,194
	DIR 1,CNTR
	SEG 1,68
	SEG 1,6E
	SEG 1,74
	SEG 1,7A
	SEG 1,0C5
	SEG 1,128
	SEG 1,12E
	SEG 1,134
	SEG 1,13A
	SEG 1,22E
	SEG 1,234
	SEG 1,23A
	SEG 1,285
	SEG 1,28B
	SEG 1,291
	SEG 1,2F7
	SEG 1,2FA
	SEG 1,345
	SEG 1,34B
	SEG 1,351
	SEG 1,357
	DIR 20,HTURN
	SEG 2,28
	SEG 2,88
	SEG 2,34
	SEG 2,94
	SEG 2,85
	SEG 2,0E5
	SEG 2,0EE
	SEG 2,14E
	SEG 2,0FA
	SEG 2,15A
	SEG 2,1EE
	SEG 2,24E
	SEG 2,1F4
	SEG 2,254
	SEG 2,245
	SEG 2,2A5
	SEG 2,251
	SEG 2,2B1
	SEG 2,2BA
	SEG 2,31A
	SEG 2,30B
	SEG 2,36B
	SEG 2,317
	SEG 2,377
	DIR 1,VTURN
	SEG 2,6C
	SEG 2,6F
	SEG 2,78
	SEG 2,7B
	SEG 2,126
	SEG 2,129
	SEG 2,132
	SEG 2,135
	SEG 2,238
	SEG 2,23B
	SEG 2,289
	SEG 2,28C
	SEG 2,2F5
	SEG 2,2F8
	SEG 2,343
	SEG 2,346
	SEG 2,34F
	SEG 2,352
	.BYTE 0


LEV14:	DIR 20,BLK
	SEG 2,28
	SEG 2,31
	SEG 2,3A
	SEG 2,0F7
	SEG 4,145
	SEG 2,1F4
	SEG 2,2B1
	SEG 2,36B
	DIR 1,BLK
	SEG 2,2E3
	SEG 2,35B
	DIR 20,HOR
	SEG 3,71
	SEG 7,7A
	SEG 2,85
	SEG 2,8B
	SEG 3,97
	SEG 2,0E8
	SEG 2,0EE
	SEG 10.,14B
	SEG 4,151
	SEG 5,1E5
	SEG 5,1EE
	SEG 2,1FA
	SEG 8,248
	SEG 2,257
	SEG 2,2B4
	SEG 3,2E5
	SEG 3,2F1
	SEG 3,30B
	SEG 2,317
	DIR 1,VER
	SEG 4,65
	SEG 4,6B
	SEG 3,75
	SEG 4,0C8
	SEG 3,0D1
	SEG 4,125
	SEG 4,12B
	SEG 7,131
	SEG 12.,1C3
	SEG 12.,1D1
	SEG 4,234
	SEG 4,28E
	SEG 4,297
	SEG 3,2EB
	SEG 4,2F4
	SEG 4,345
	SEG 7,34E
	SEG 4,357
	.BYTE 0


LEV15:	DIR 1,CNTR
	SEG 1,68
	SEG 1,71
	SEG 1,77
	SEG 1,0C5
	SEG 1,0CB
	SEG 1,0CE
	SEG 1,0D7
	SEG 1,128
	SEG 1,131
	SEG 1,134
	SEG 1,13A
	SEG 1,188
	SEG 1,18E
	SEG 1,197
	SEG 1,22E
	SEG 1,23A
	SEG 1,288
	SEG 1,28B
	SEG 1,291
	SEG 1,294
	SEG 1,297
	SEG 1,2E8
	SEG 1,345
	SEG 1,34B
	SEG 1,34E
	SEG 1,354
	SEG 1,357
	SEG 1,35A
	DIR 20,HTURN
	SEG 2,28
	SEG 2,88
	SEG 2,31
	SEG 2,91
	SEG 2,85
	SEG 2,0E5
	SEG 2,8B
	SEG 2,0EB
	SEG 2,97
	SEG 2,0F7
	SEG 2,0F4
	SEG 2,154
	SEG 2,0FA
	SEG 2,15A
	SEG 2,14E
	SEG 2,1AE
	SEG 2,1EE
	SEG 2,24E
	SEG 2,24B
	SEG 2,2AB
	SEG 2,251
	SEG 2,2B1
	SEG 2,257
	SEG 2,2B7
	SEG 2,30B
	SEG 2,36B
	SEG 2,314
	SEG 2,374
	SEG 2,31A
	SEG 2,37A
	DIR 1,VTURN
	SEG 2,75
	SEG 2,78
	SEG 2,0CC
	SEG 2,0CF
	SEG 2,126
	SEG 2,129
	SEG 2,12F
	SEG 2,132
	SEG 2,186
	SEG 2,189
	SEG 2,195
	SEG 2,198
	SEG 2,238
	SEG 2,23B
	SEG 2,286
	SEG 2,289
	SEG 2,292
	SEG 2,295
	SEG 2,2E6
	SEG 2,2E9
	SEG 2,343
	SEG 2,346
	SEG 2,34C
	SEG 2,34F
	SEG 2,355
	SEG 2,358
	.BYTE 0

LEV16:	DIR 1,BLK
	SEG 16.,28
	SEG 16.,48
	SEG 16.,68
	SEG 16.,88
	SEG 16.,0A8
	SEG 16.,0C8
	SEG 16.,0E8
	SEG 16.,108
	SEG 16.,128
	SEG 26.,183
	SEG 26.,1A3
	DIR 20,HOR
	SEG 2,1FA
	SEG 4,29A
	SEG 2,37A
	SEG 11.,257
	SEG 11.,1F4
	SEG 11.,251
	SEG 11.,1EE
	SEG 11.,24B
	SEG 11.,1E8
	SEG 11.,245
	.BYTE 0


	.REPT 8-.&07		;THIS IS SO MVSUB IS ALLIGNED AND MVCPY CAN BE USED
	.BYTE 0FF
	.ENDR

	.END
                                                              